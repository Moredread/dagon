var searchIndex = {};
searchIndex["dagon_run"] = {"doc":"","items":[],"paths":[]};
searchIndex["dagon"] = {"doc":"","items":[[3,"GravityParticle","dagon","",null,null],[12,"position","","",0,null],[12,"velocity","","",0,null],[12,"mass","","",0,null],[5,"newtonian_gravity_force","","",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"point"},{"name":"point"}],"output":{"name":"vector"}}],[5,"force_between_particles","","",null,{"inputs":[{"name":"gravityparticle"},{"name":"gravityparticle"}],"output":{"name":"vector"}}],[5,"forces_by_direct_summation","","",null,{"inputs":[{"name":"gravityparticle"},{"name":"i"}],"output":{"name":"vector"}}],[5,"forces_from_tree","","",null,{"inputs":[{"name":"gravityparticle"},{"name":"tree"}],"output":{"name":"vector"}}],[5,"try_makedir","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"make_random_initial_conditions","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"vec"}}],[6,"Vector","","",null,null],[6,"Point","","",null,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"position","","",0,null]],"paths":[[3,"GravityParticle"]]};
searchIndex["acacia"] = {"doc":"A spatial tree library","items":[[0,"partition","acacia","Abstraction of spatial partitioning schemes",null,null],[3,"Interval","acacia::partition","A half-open interval [a, b) between two points a and b",null,null],[3,"Box2","","A 2d box of intervals",null,null],[3,"Box3","","A 3d box of intervals",null,null],[3,"Ncube","","An N-cube based partitioning scheme",null,null],[3,"UnitQuad","","A partition of the unit quad [0, 1) × [0, 1)",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new interval given lower and upper bound",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"interval"}}],[11,"subdivide","","",0,null],[11,"contains","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Create a new box from intervals",1,{"inputs":[{"name":"interval"},{"name":"interval"}],"output":{"name":"box2"}}],[11,"subdivide","","",1,null],[11,"contains","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Create a new box from intervals",2,{"inputs":[{"name":"interval"},{"name":"interval"},{"name":"interval"}],"output":{"name":"box3"}}],[11,"subdivide","","",2,null],[11,"contains","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"new","","Create a new N-cube given its center and width",3,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"ncube"}}],[11,"width","","The width of the N-cube",3,null],[11,"center","","The center of the N-cube",3,null],[11,"subdivide","","",3,null],[11,"contains","","",3,null],[11,"dispatch","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"new","","Create a new `UnitQuad`",4,null],[11,"scale","","Integer scale",4,null],[11,"offset","","Integer offset",4,null],[11,"coordinate","","Get coordinate within the partition from (u, v) coordinates",4,null],[11,"center","","Center of the partitioned region",4,null],[11,"width","","Width of the partitioned region",4,null],[11,"subdivide","","",4,null],[11,"contains","","",4,null],[0,"cubemap","","Cubemapping module",null,null],[3,"Quad","acacia::partition::cubemap","A quad-shaped partition of the side of a cubemap",null,null],[12,"axis","","Normal axis of the quad normal",5,null],[12,"direction","","Direction of the quad normal along the axis",5,null],[12,"flat_quad","","Embedded flat unit quad",5,null],[4,"Direction","","An axis direction",null,null],[13,"Positive","","Positive direction",6,null],[13,"Negative","","Negative direction",6,null],[4,"Axis","","A coordinate axis",null,null],[13,"X","","X-axis",7,null],[13,"Y","","Y-axis",7,null],[13,"Z","","Z-axis",7,null],[4,"CubeMap","","A cubemap partition of a 3-vector space",null,null],[13,"Sphere","","The full sphere",8,null],[13,"Quad","","A quad-based subdivision",8,null],[5,"axis_vector_triple","","Get the triple of axis vectors",null,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"hash","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"hash","","",7,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"center_on_cube","","The center of this quad on the cube",5,null],[11,"center_on_sphere","","The center of this quad on the unit sphere",5,null],[11,"subdivide","","",5,null],[11,"contains","","",5,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"hash","","",8,null],[11,"subdivide","","",8,null],[11,"contains","","",8,null],[8,"Subdivide","acacia::partition","A type that can be subdivided",null,null],[10,"subdivide","","Subdivide into smaller partitions",9,null],[8,"Partition","","A type describing a partition of some space",null,null],[10,"contains","","Does the partition contain an element?",10,null],[11,"dispatch","","Dispatch an element to the correct subpartition",10,null],[8,"Mid","","The notion of a mid point between two inputs",null,null],[10,"mid","","Return the mid between this point and another",11,null],[0,"pure_tree","acacia","Pure tree implementation.",null,null],[3,"PureTree","acacia::pure_tree","A pure N-dimensional tree",null,null],[11,"new","","Construct a tree without checking the geometry of the input data",12,{"inputs":[{"name":"i"},{"name":"p"}],"output":{"name":"result"}}],[11,"state","","",12,null],[11,"partition","","",12,null],[0,"data_tree","acacia","Implementation of tree with associated data.",null,null],[3,"Tree","acacia::data_tree","An N-dimensional tree",null,null],[11,"new","","Construct the tree from an iterator",13,{"inputs":[{"name":"i"},{"name":"p"},{"name":"d"},{"name":"s"},{"name":"c"}],"output":{"name":"result"}}],[11,"state","","",13,null],[11,"partition","","",13,null],[11,"data","","",13,null],[0,"traits","acacia","Common abstractions for all trees",null,null],[3,"Positioned","acacia::traits","A positioned object",null,null],[12,"object","","The object wrapped in this type",14,null],[12,"position","","The position stored along with it",14,null],[4,"NodeState","","The state of a node",null,null],[13,"Empty","","An empty node does not contain any object",15,null],[13,"Leaf","","A leaf node contains exactly one object",15,null],[13,"Branch","","A branch node contains a collection of nodes",15,null],[8,"Node","","A tree node",null,null],[16,"Partition","","Type of spatial partitioning scheme",16,null],[16,"Object","","The type of object stored",16,null],[16,"Container","","Type of container used to store subnodes",16,null],[10,"state","","The state of the node",16,null],[10,"partition","","The partitioning scheme",16,null],[8,"AssociatedData","","A tree with associated data",null,null],[16,"Data","","Type of the associated data",17,null],[10,"data","","Data associated to the node",17,null],[8,"ObjectQuery","","A tree that allows recursive queries on its objects. A closure is used to\ndetermine the recursion behavior.",null,null],[10,"query_objects","","Iterate over objects through all nodes.",18,null],[8,"DataQuery","","A tree which allows recursive queries on its associated data",null,null],[10,"query_data","","Compute a query on the associated data using a mutable accumulator",19,null],[8,"Position","","A type that has a notion of a position",null,null],[16,"Point","","The underlying point type",20,null],[10,"position","","The position",20,null],[11,"clone","","",14,null],[11,"position","","",14,null],[0,"iter","acacia","Generic tree iterators.",null,null],[3,"Iter","acacia::iter","An iterator over the objects in a tree.",null,null],[3,"RecurseObjects","","An iterator over the objects in a tree, that only recurses as deep as\nspecified by some predicate.",null,null],[3,"RecurseData","","An iterator over the objects in a tree, that only recurses as deep as\nspecified by some predicate.",null,null],[11,"new","","Create a new iterator.",21,{"inputs":[{"name":"t"}],"output":{"name":"iter"}}],[11,"next","","",21,null],[11,"new","","Create a new iterator.",22,{"inputs":[{"name":"t"},{"name":"r"}],"output":{"name":"recurseobjects"}}],[11,"next","","",22,null],[11,"new","","Create a new iterator.",23,{"inputs":[{"name":"t"},{"name":"r"}],"output":{"name":"recursedata"}}],[11,"next","","",23,null],[0,"error","acacia","Error types.",null,null],[4,"ConstructionError","acacia::error","Errors during tree construction",null,null],[13,"ObjectOutsidePartition","","An object lays outside the tree domain",24,null],[11,"eq","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",24,null]],"paths":[[3,"Interval"],[3,"Box2"],[3,"Box3"],[3,"Ncube"],[3,"UnitQuad"],[3,"Quad"],[4,"Direction"],[4,"Axis"],[4,"CubeMap"],[8,"Subdivide"],[8,"Partition"],[8,"Mid"],[3,"PureTree"],[3,"Tree"],[3,"Positioned"],[4,"NodeState"],[8,"Node"],[8,"AssociatedData"],[8,"ObjectQuery"],[8,"DataQuery"],[8,"Position"],[3,"Iter"],[3,"RecurseObjects"],[3,"RecurseData"],[4,"ConstructionError"]]};
searchIndex["nalgebra"] = {"doc":"# nalgebra","items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMatrix","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DMatrix1","","A stack-allocated dynamically sized matrix with at most one row and column.",null,null],[3,"DMatrix2","","A stack-allocated dynamically sized square or rectangular matrix with at most 2 rows and columns.",null,null],[3,"DMatrix3","","A stack-allocated dynamically sized square or rectangular matrix with at most 3 rows and columns.",null,null],[3,"DMatrix4","","A stack-allocated dynamically sized square or rectangular matrix with at most 4 rows and columns.",null,null],[3,"DMatrix5","","A stack-allocated dynamically sized square or rectangular matrix with at most 5 rows and columns.",null,null],[3,"DMatrix6","","A stack-allocated dynamically sized square or rectangular matrix with at most 6 rows and columns.",null,null],[3,"DVector","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVector1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVector2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVector3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVector4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVector5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVector6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Isometry2","","Two dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Isometry3","","Three dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Similarity2","","A two-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",3,null],[3,"Similarity3","","A three-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",4,null],[3,"Matrix1","","Square matrix of dimension 1.",null,null],[12,"m11","","",5,null],[3,"Matrix2","","Square matrix of dimension 2.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[3,"Matrix3","","Square matrix of dimension 3.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[3,"Matrix4","","Square matrix of dimension 4.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[3,"Matrix5","","Square matrix of dimension 5.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[3,"Matrix6","","Square matrix of dimension 6.",null,null],[12,"m11","","",10,null],[12,"m21","","",10,null],[12,"m31","","",10,null],[12,"m41","","",10,null],[12,"m51","","",10,null],[12,"m61","","",10,null],[12,"m12","","",10,null],[12,"m22","","",10,null],[12,"m32","","",10,null],[12,"m42","","",10,null],[12,"m52","","",10,null],[12,"m62","","",10,null],[12,"m13","","",10,null],[12,"m23","","",10,null],[12,"m33","","",10,null],[12,"m43","","",10,null],[12,"m53","","",10,null],[12,"m63","","",10,null],[12,"m14","","",10,null],[12,"m24","","",10,null],[12,"m34","","",10,null],[12,"m44","","",10,null],[12,"m54","","",10,null],[12,"m64","","",10,null],[12,"m15","","",10,null],[12,"m25","","",10,null],[12,"m35","","",10,null],[12,"m45","","",10,null],[12,"m55","","",10,null],[12,"m65","","",10,null],[12,"m16","","",10,null],[12,"m26","","",10,null],[12,"m36","","",10,null],[12,"m46","","",10,null],[12,"m56","","",10,null],[12,"m66","","",10,null],[3,"Rotation2","","Two dimensional rotation matrix.",null,null],[3,"Rotation3","","Three dimensional rotation matrix.",null,null],[3,"Vector1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",11,null],[3,"Vector2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[3,"Vector3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[3,"Vector4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[3,"Vector5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[3,"Vector6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",16,null],[12,"y","","Second component of the vector.",16,null],[12,"z","","Third component of the vector.",16,null],[12,"w","","Fourth component of the vector.",16,null],[12,"a","","Fifth of the vector.",16,null],[12,"b","","Sixth component of the vector.",16,null],[3,"Point1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",17,null],[3,"Point2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[3,"Point3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[3,"Point4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[3,"Point5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[3,"Point6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",22,null],[12,"y","","Second component of the point.",22,null],[12,"z","","Third component of the point.",22,null],[12,"w","","Fourth component of the point.",22,null],[12,"a","","Fifth of the point.",22,null],[12,"b","","Sixth component of the point.",22,null],[3,"Perspective3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspectiveMatrix3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Orthographic3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthographicMatrix3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quaternion","","A quaternion. See the `UnitQuaternion` type alias for a quaternion that can be used as a rotation.",null,null],[12,"w","","The scalar component of the quaternion.",23,null],[12,"i","","The first vector component of the quaternion.",23,null],[12,"j","","The second vector component of the quaternion.",23,null],[12,"k","","The third vector component of the quaternion.",23,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[4,"PartialOrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",24,null],[13,"PartialEqual","","Equality relationship.",24,null],[13,"PartialGreater","","Result of a strict comparison.",24,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",24,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vector`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg\nReturns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"partialordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a &lt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a &lt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a &gt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a &gt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"distance_squared","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inverse_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rotation_matrix","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inverse_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"normtype"}}],[5,"norm_squared","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"normtype"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Gets the normalized version of a vector or `None` if its norm is smaller than `min_norm`.",null,{"inputs":[{"name":"v"},{"name":"normtype"}],"output":{"name":"option"}}],[5,"determinant","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inverse","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"covariance","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diagonal","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dimension","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"new_uninitialized","","Creates an uninitialized matrix.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"from_element","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data\nin column-major order.",25,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data\nin column-major order.",25,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in row-major order.\nNote that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data\nin column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_column_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in column-major order.\nNote that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data\nin column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_fn","","Builds a matrix filled with the results of a function applied to each of its component coordinates.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix"}}],[11,"into_vector","","Transforms this matrix into an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_zeros","","Builds a matrix filled with zeros.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",25,null],[11,"reset","","Set this matrix components to zero.",25,null],[11,"new_random","","Builds a matrix filled with random values.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"nrows","","The number of row on the matrix.",25,null],[11,"ncols","","The number of columns on the matrix.",25,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_identity","","Builds an identity matrix.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",25,null],[11,"unsafe_at","","Just like `at` without bounds checking.",25,null],[11,"swap","","",25,null],[11,"shape","","",25,null],[11,"index","","",25,null],[11,"index_mut","","",25,null],[11,"mul","","",25,null],[11,"mul","","",25,null],[11,"mul_assign","","",25,null],[11,"mul_assign","","",25,null],[11,"mul","","",25,null],[11,"mul","","",25,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"add","","",25,null],[11,"add","","",25,null],[11,"add_assign","","",25,null],[11,"add_assign","","",25,null],[11,"sub","","",25,null],[11,"sub_assign","","",25,null],[11,"sub","","",25,null],[11,"sub","","",25,null],[11,"sub_assign","","",25,null],[11,"sub_assign","","",25,null],[11,"inverse","","",25,null],[11,"inverse_mut","","",25,null],[11,"transpose","","",25,null],[11,"transpose_mut","","",25,null],[11,"mean","","",25,null],[11,"covariance","","",25,null],[11,"ncols","","",25,null],[11,"set_column","","",25,null],[11,"column","","",25,null],[11,"column_slice","","",25,null],[11,"nrows","","",25,null],[11,"set_row","","",25,null],[11,"row","","",25,null],[11,"row_slice","","",25,null],[11,"from_diagonal","","",25,{"inputs":[{"name":"dvector"}],"output":{"name":"dmatrix"}}],[11,"diagonal","","",25,null],[11,"approx_epsilon","","",25,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,null],[11,"approx_eq_ulps","","",25,null],[11,"fmt","","",25,null],[11,"mul","","",25,null],[11,"div","","",25,null],[11,"add","","",25,null],[11,"eq","","",26,null],[11,"clone","","",26,null],[11,"new_zeros","","Builds a matrix filled with zeros.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",26,null],[11,"reset","","Set this matrix components to zero.",26,null],[11,"new_random","","Builds a matrix filled with random values.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"nrows","","The number of row on the matrix.",26,null],[11,"ncols","","The number of columns on the matrix.",26,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"new_identity","","Builds an identity matrix.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",26,null],[11,"unsafe_at","","Just like `at` without bounds checking.",26,null],[11,"swap","","",26,null],[11,"shape","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"mul","","",26,null],[11,"mul","","",26,null],[11,"mul_assign","","",26,null],[11,"mul_assign","","",26,null],[11,"mul","","",26,null],[11,"mul","","",26,null],[11,"mul","","",27,null],[11,"mul","","",27,null],[11,"mul_assign","","",27,null],[11,"mul_assign","","",27,null],[11,"add","","",26,null],[11,"add","","",26,null],[11,"add_assign","","",26,null],[11,"add_assign","","",26,null],[11,"sub","","",26,null],[11,"sub_assign","","",26,null],[11,"sub","","",26,null],[11,"sub","","",26,null],[11,"sub_assign","","",26,null],[11,"sub_assign","","",26,null],[11,"inverse","","",26,null],[11,"inverse_mut","","",26,null],[11,"transpose","","",26,null],[11,"transpose_mut","","",26,null],[11,"mean","","",26,null],[11,"covariance","","",26,null],[11,"ncols","","",26,null],[11,"set_column","","",26,null],[11,"column","","",26,null],[11,"column_slice","","",26,null],[11,"nrows","","",26,null],[11,"set_row","","",26,null],[11,"row","","",26,null],[11,"row_slice","","",26,null],[11,"from_diagonal","","",26,{"inputs":[{"name":"dvector1"}],"output":{"name":"dmatrix1"}}],[11,"diagonal","","",26,null],[11,"approx_epsilon","","",26,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,null],[11,"approx_eq_ulps","","",26,null],[11,"fmt","","",26,null],[11,"mul","","",26,null],[11,"div","","",26,null],[11,"add","","",26,null],[11,"from_element","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",26,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",26,null],[11,"from_fn","","Builds a matrix using an initialization function.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix1"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"new_zeros","","Builds a matrix filled with zeros.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",28,null],[11,"reset","","Set this matrix components to zero.",28,null],[11,"new_random","","Builds a matrix filled with random values.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"nrows","","The number of row on the matrix.",28,null],[11,"ncols","","The number of columns on the matrix.",28,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",28,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",28,null],[11,"new_identity","","Builds an identity matrix.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",28,null],[11,"unsafe_at","","Just like `at` without bounds checking.",28,null],[11,"swap","","",28,null],[11,"shape","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"mul","","",28,null],[11,"mul","","",28,null],[11,"mul_assign","","",28,null],[11,"mul_assign","","",28,null],[11,"mul","","",28,null],[11,"mul","","",28,null],[11,"mul","","",29,null],[11,"mul","","",29,null],[11,"mul_assign","","",29,null],[11,"mul_assign","","",29,null],[11,"add","","",28,null],[11,"add","","",28,null],[11,"add_assign","","",28,null],[11,"add_assign","","",28,null],[11,"sub","","",28,null],[11,"sub_assign","","",28,null],[11,"sub","","",28,null],[11,"sub","","",28,null],[11,"sub_assign","","",28,null],[11,"sub_assign","","",28,null],[11,"inverse","","",28,null],[11,"inverse_mut","","",28,null],[11,"transpose","","",28,null],[11,"transpose_mut","","",28,null],[11,"mean","","",28,null],[11,"covariance","","",28,null],[11,"ncols","","",28,null],[11,"set_column","","",28,null],[11,"column","","",28,null],[11,"column_slice","","",28,null],[11,"nrows","","",28,null],[11,"set_row","","",28,null],[11,"row","","",28,null],[11,"row_slice","","",28,null],[11,"from_diagonal","","",28,{"inputs":[{"name":"dvector2"}],"output":{"name":"dmatrix2"}}],[11,"diagonal","","",28,null],[11,"approx_epsilon","","",28,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,null],[11,"approx_eq_ulps","","",28,null],[11,"fmt","","",28,null],[11,"mul","","",28,null],[11,"div","","",28,null],[11,"add","","",28,null],[11,"from_element","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",28,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",28,null],[11,"from_fn","","Builds a matrix using an initialization function.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix2"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"eq","","",30,null],[11,"clone","","",30,null],[11,"new_zeros","","Builds a matrix filled with zeros.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",30,null],[11,"reset","","Set this matrix components to zero.",30,null],[11,"new_random","","Builds a matrix filled with random values.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"nrows","","The number of row on the matrix.",30,null],[11,"ncols","","The number of columns on the matrix.",30,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",30,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",30,null],[11,"new_identity","","Builds an identity matrix.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",30,null],[11,"unsafe_at","","Just like `at` without bounds checking.",30,null],[11,"swap","","",30,null],[11,"shape","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"mul","","",30,null],[11,"mul","","",30,null],[11,"mul_assign","","",30,null],[11,"mul_assign","","",30,null],[11,"mul","","",30,null],[11,"mul","","",30,null],[11,"mul","","",31,null],[11,"mul","","",31,null],[11,"mul_assign","","",31,null],[11,"mul_assign","","",31,null],[11,"add","","",30,null],[11,"add","","",30,null],[11,"add_assign","","",30,null],[11,"add_assign","","",30,null],[11,"sub","","",30,null],[11,"sub_assign","","",30,null],[11,"sub","","",30,null],[11,"sub","","",30,null],[11,"sub_assign","","",30,null],[11,"sub_assign","","",30,null],[11,"inverse","","",30,null],[11,"inverse_mut","","",30,null],[11,"transpose","","",30,null],[11,"transpose_mut","","",30,null],[11,"mean","","",30,null],[11,"covariance","","",30,null],[11,"ncols","","",30,null],[11,"set_column","","",30,null],[11,"column","","",30,null],[11,"column_slice","","",30,null],[11,"nrows","","",30,null],[11,"set_row","","",30,null],[11,"row","","",30,null],[11,"row_slice","","",30,null],[11,"from_diagonal","","",30,{"inputs":[{"name":"dvector3"}],"output":{"name":"dmatrix3"}}],[11,"diagonal","","",30,null],[11,"approx_epsilon","","",30,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,null],[11,"approx_eq_ulps","","",30,null],[11,"fmt","","",30,null],[11,"mul","","",30,null],[11,"div","","",30,null],[11,"add","","",30,null],[11,"from_element","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",30,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",30,null],[11,"from_fn","","Builds a matrix using an initialization function.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix3"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new_zeros","","Builds a matrix filled with zeros.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",32,null],[11,"reset","","Set this matrix components to zero.",32,null],[11,"new_random","","Builds a matrix filled with random values.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"nrows","","The number of row on the matrix.",32,null],[11,"ncols","","The number of columns on the matrix.",32,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",32,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",32,null],[11,"new_identity","","Builds an identity matrix.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",32,null],[11,"unsafe_at","","Just like `at` without bounds checking.",32,null],[11,"swap","","",32,null],[11,"shape","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"mul","","",32,null],[11,"mul","","",32,null],[11,"mul_assign","","",32,null],[11,"mul_assign","","",32,null],[11,"mul","","",32,null],[11,"mul","","",32,null],[11,"mul","","",33,null],[11,"mul","","",33,null],[11,"mul_assign","","",33,null],[11,"mul_assign","","",33,null],[11,"add","","",32,null],[11,"add","","",32,null],[11,"add_assign","","",32,null],[11,"add_assign","","",32,null],[11,"sub","","",32,null],[11,"sub_assign","","",32,null],[11,"sub","","",32,null],[11,"sub","","",32,null],[11,"sub_assign","","",32,null],[11,"sub_assign","","",32,null],[11,"inverse","","",32,null],[11,"inverse_mut","","",32,null],[11,"transpose","","",32,null],[11,"transpose_mut","","",32,null],[11,"mean","","",32,null],[11,"covariance","","",32,null],[11,"ncols","","",32,null],[11,"set_column","","",32,null],[11,"column","","",32,null],[11,"column_slice","","",32,null],[11,"nrows","","",32,null],[11,"set_row","","",32,null],[11,"row","","",32,null],[11,"row_slice","","",32,null],[11,"from_diagonal","","",32,{"inputs":[{"name":"dvector4"}],"output":{"name":"dmatrix4"}}],[11,"diagonal","","",32,null],[11,"approx_epsilon","","",32,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,null],[11,"approx_eq_ulps","","",32,null],[11,"fmt","","",32,null],[11,"mul","","",32,null],[11,"div","","",32,null],[11,"add","","",32,null],[11,"from_element","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",32,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",32,null],[11,"from_fn","","Builds a matrix using an initialization function.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix4"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"eq","","",34,null],[11,"clone","","",34,null],[11,"new_zeros","","Builds a matrix filled with zeros.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",34,null],[11,"reset","","Set this matrix components to zero.",34,null],[11,"new_random","","Builds a matrix filled with random values.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"nrows","","The number of row on the matrix.",34,null],[11,"ncols","","The number of columns on the matrix.",34,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",34,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",34,null],[11,"new_identity","","Builds an identity matrix.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",34,null],[11,"unsafe_at","","Just like `at` without bounds checking.",34,null],[11,"swap","","",34,null],[11,"shape","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"mul","","",34,null],[11,"mul","","",34,null],[11,"mul_assign","","",34,null],[11,"mul_assign","","",34,null],[11,"mul","","",34,null],[11,"mul","","",34,null],[11,"mul","","",35,null],[11,"mul","","",35,null],[11,"mul_assign","","",35,null],[11,"mul_assign","","",35,null],[11,"add","","",34,null],[11,"add","","",34,null],[11,"add_assign","","",34,null],[11,"add_assign","","",34,null],[11,"sub","","",34,null],[11,"sub_assign","","",34,null],[11,"sub","","",34,null],[11,"sub","","",34,null],[11,"sub_assign","","",34,null],[11,"sub_assign","","",34,null],[11,"inverse","","",34,null],[11,"inverse_mut","","",34,null],[11,"transpose","","",34,null],[11,"transpose_mut","","",34,null],[11,"mean","","",34,null],[11,"covariance","","",34,null],[11,"ncols","","",34,null],[11,"set_column","","",34,null],[11,"column","","",34,null],[11,"column_slice","","",34,null],[11,"nrows","","",34,null],[11,"set_row","","",34,null],[11,"row","","",34,null],[11,"row_slice","","",34,null],[11,"from_diagonal","","",34,{"inputs":[{"name":"dvector5"}],"output":{"name":"dmatrix5"}}],[11,"diagonal","","",34,null],[11,"approx_epsilon","","",34,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",34,null],[11,"approx_eq_ulps","","",34,null],[11,"fmt","","",34,null],[11,"mul","","",34,null],[11,"div","","",34,null],[11,"add","","",34,null],[11,"from_element","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",34,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",34,null],[11,"from_fn","","Builds a matrix using an initialization function.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix5"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"eq","","",36,null],[11,"clone","","",36,null],[11,"new_zeros","","Builds a matrix filled with zeros.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",36,null],[11,"reset","","Set this matrix components to zero.",36,null],[11,"new_random","","Builds a matrix filled with random values.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"nrows","","The number of row on the matrix.",36,null],[11,"ncols","","The number of columns on the matrix.",36,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",36,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",36,null],[11,"new_identity","","Builds an identity matrix.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",36,null],[11,"unsafe_at","","Just like `at` without bounds checking.",36,null],[11,"swap","","",36,null],[11,"shape","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"mul","","",36,null],[11,"mul","","",36,null],[11,"mul_assign","","",36,null],[11,"mul_assign","","",36,null],[11,"mul","","",36,null],[11,"mul","","",36,null],[11,"mul","","",37,null],[11,"mul","","",37,null],[11,"mul_assign","","",37,null],[11,"mul_assign","","",37,null],[11,"add","","",36,null],[11,"add","","",36,null],[11,"add_assign","","",36,null],[11,"add_assign","","",36,null],[11,"sub","","",36,null],[11,"sub_assign","","",36,null],[11,"sub","","",36,null],[11,"sub","","",36,null],[11,"sub_assign","","",36,null],[11,"sub_assign","","",36,null],[11,"inverse","","",36,null],[11,"inverse_mut","","",36,null],[11,"transpose","","",36,null],[11,"transpose_mut","","",36,null],[11,"mean","","",36,null],[11,"covariance","","",36,null],[11,"ncols","","",36,null],[11,"set_column","","",36,null],[11,"column","","",36,null],[11,"column_slice","","",36,null],[11,"nrows","","",36,null],[11,"set_row","","",36,null],[11,"row","","",36,null],[11,"row_slice","","",36,null],[11,"from_diagonal","","",36,{"inputs":[{"name":"dvector6"}],"output":{"name":"dmatrix6"}}],[11,"diagonal","","",36,null],[11,"approx_epsilon","","",36,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",36,null],[11,"approx_eq_ulps","","",36,null],[11,"fmt","","",36,null],[11,"mul","","",36,null],[11,"div","","",36,null],[11,"add","","",36,null],[11,"from_element","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",36,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",36,null],[11,"from_fn","","Builds a matrix using an initialization function.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix6"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new_uninitialized","","Creates an uninitialized vector.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"from_element","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector"}}],[11,"len","","The vector length.",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"dvector"}}],[11,"outer","","",0,null],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"shape","","",0,null],[11,"swap","","",0,null],[11,"unsafe_at","","",0,null],[11,"unsafe_set","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"iter","","",0,null],[11,"iter_mut","","",0,null],[11,"axpy","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"neg","","",0,null],[11,"dot","","",0,null],[11,"norm_squared","","",0,null],[11,"normalize","","",0,null],[11,"normalize_mut","","",0,null],[11,"try_normalize","","",0,null],[11,"try_normalize_mut","","",0,null],[11,"mean","","",0,null],[11,"approx_epsilon","","",0,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,null],[11,"approx_eq_ulps","","",0,null],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,null],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,null],[11,"as_ref","","",27,null],[11,"as_mut","","",27,null],[11,"shape","","",27,null],[11,"swap","","",27,null],[11,"unsafe_at","","",27,null],[11,"unsafe_set","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"iter","","",27,null],[11,"iter_mut","","",27,null],[11,"axpy","","",27,null],[11,"mul","","",27,null],[11,"mul","","",27,null],[11,"mul_assign","","",27,null],[11,"mul_assign","","",27,null],[11,"div","","",27,null],[11,"div","","",27,null],[11,"div_assign","","",27,null],[11,"div_assign","","",27,null],[11,"add","","",27,null],[11,"add","","",27,null],[11,"add_assign","","",27,null],[11,"add_assign","","",27,null],[11,"sub","","",27,null],[11,"sub","","",27,null],[11,"sub_assign","","",27,null],[11,"sub_assign","","",27,null],[11,"neg","","",27,null],[11,"dot","","",27,null],[11,"norm_squared","","",27,null],[11,"normalize","","",27,null],[11,"normalize_mut","","",27,null],[11,"try_normalize","","",27,null],[11,"try_normalize_mut","","",27,null],[11,"mean","","",27,null],[11,"approx_epsilon","","",27,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,null],[11,"approx_eq_ulps","","",27,null],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27,null],[11,"len","","The number of elements of this vector.",27,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"eq","","",27,null],[11,"clone","","",27,null],[11,"from_element","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector1"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"dvector1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,null],[11,"as_ref","","",29,null],[11,"as_mut","","",29,null],[11,"shape","","",29,null],[11,"swap","","",29,null],[11,"unsafe_at","","",29,null],[11,"unsafe_set","","",29,null],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"iter","","",29,null],[11,"iter_mut","","",29,null],[11,"axpy","","",29,null],[11,"mul","","",29,null],[11,"mul","","",29,null],[11,"mul_assign","","",29,null],[11,"mul_assign","","",29,null],[11,"div","","",29,null],[11,"div","","",29,null],[11,"div_assign","","",29,null],[11,"div_assign","","",29,null],[11,"add","","",29,null],[11,"add","","",29,null],[11,"add_assign","","",29,null],[11,"add_assign","","",29,null],[11,"sub","","",29,null],[11,"sub","","",29,null],[11,"sub_assign","","",29,null],[11,"sub_assign","","",29,null],[11,"neg","","",29,null],[11,"dot","","",29,null],[11,"norm_squared","","",29,null],[11,"normalize","","",29,null],[11,"normalize_mut","","",29,null],[11,"try_normalize","","",29,null],[11,"try_normalize_mut","","",29,null],[11,"mean","","",29,null],[11,"approx_epsilon","","",29,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,null],[11,"approx_eq_ulps","","",29,null],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29,null],[11,"len","","The number of elements of this vector.",29,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"eq","","",29,null],[11,"clone","","",29,null],[11,"from_element","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector2"}}],[11,"from_iter","","",29,{"inputs":[{"name":"i"}],"output":{"name":"dvector2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",31,null],[11,"as_ref","","",31,null],[11,"as_mut","","",31,null],[11,"shape","","",31,null],[11,"swap","","",31,null],[11,"unsafe_at","","",31,null],[11,"unsafe_set","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"iter","","",31,null],[11,"iter_mut","","",31,null],[11,"axpy","","",31,null],[11,"mul","","",31,null],[11,"mul","","",31,null],[11,"mul_assign","","",31,null],[11,"mul_assign","","",31,null],[11,"div","","",31,null],[11,"div","","",31,null],[11,"div_assign","","",31,null],[11,"div_assign","","",31,null],[11,"add","","",31,null],[11,"add","","",31,null],[11,"add_assign","","",31,null],[11,"add_assign","","",31,null],[11,"sub","","",31,null],[11,"sub","","",31,null],[11,"sub_assign","","",31,null],[11,"sub_assign","","",31,null],[11,"neg","","",31,null],[11,"dot","","",31,null],[11,"norm_squared","","",31,null],[11,"normalize","","",31,null],[11,"normalize_mut","","",31,null],[11,"try_normalize","","",31,null],[11,"try_normalize_mut","","",31,null],[11,"mean","","",31,null],[11,"approx_epsilon","","",31,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,null],[11,"approx_eq_ulps","","",31,null],[11,"new_zeros","","Builds a vector filled with zeros.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_ones","","Builds a vector filled with ones.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_random","","Builds a vector filled with random values.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",31,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",31,null],[11,"len","","The number of elements of this vector.",31,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"eq","","",31,null],[11,"clone","","",31,null],[11,"from_element","","Builds a vector filled with a constant.",31,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",31,null],[11,"from_fn","","Builds a vector filled with the result of a function.",31,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector3"}}],[11,"from_iter","","",31,{"inputs":[{"name":"i"}],"output":{"name":"dvector3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",33,null],[11,"as_ref","","",33,null],[11,"as_mut","","",33,null],[11,"shape","","",33,null],[11,"swap","","",33,null],[11,"unsafe_at","","",33,null],[11,"unsafe_set","","",33,null],[11,"index","","",33,null],[11,"index_mut","","",33,null],[11,"iter","","",33,null],[11,"iter_mut","","",33,null],[11,"axpy","","",33,null],[11,"mul","","",33,null],[11,"mul","","",33,null],[11,"mul_assign","","",33,null],[11,"mul_assign","","",33,null],[11,"div","","",33,null],[11,"div","","",33,null],[11,"div_assign","","",33,null],[11,"div_assign","","",33,null],[11,"add","","",33,null],[11,"add","","",33,null],[11,"add_assign","","",33,null],[11,"add_assign","","",33,null],[11,"sub","","",33,null],[11,"sub","","",33,null],[11,"sub_assign","","",33,null],[11,"sub_assign","","",33,null],[11,"neg","","",33,null],[11,"dot","","",33,null],[11,"norm_squared","","",33,null],[11,"normalize","","",33,null],[11,"normalize_mut","","",33,null],[11,"try_normalize","","",33,null],[11,"try_normalize_mut","","",33,null],[11,"mean","","",33,null],[11,"approx_epsilon","","",33,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,null],[11,"approx_eq_ulps","","",33,null],[11,"new_zeros","","Builds a vector filled with zeros.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_ones","","Builds a vector filled with ones.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_random","","Builds a vector filled with random values.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",33,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",33,null],[11,"len","","The number of elements of this vector.",33,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"eq","","",33,null],[11,"clone","","",33,null],[11,"from_element","","Builds a vector filled with a constant.",33,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",33,null],[11,"from_fn","","Builds a vector filled with the result of a function.",33,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector4"}}],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"dvector4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",35,null],[11,"as_ref","","",35,null],[11,"as_mut","","",35,null],[11,"shape","","",35,null],[11,"swap","","",35,null],[11,"unsafe_at","","",35,null],[11,"unsafe_set","","",35,null],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"iter","","",35,null],[11,"iter_mut","","",35,null],[11,"axpy","","",35,null],[11,"mul","","",35,null],[11,"mul","","",35,null],[11,"mul_assign","","",35,null],[11,"mul_assign","","",35,null],[11,"div","","",35,null],[11,"div","","",35,null],[11,"div_assign","","",35,null],[11,"div_assign","","",35,null],[11,"add","","",35,null],[11,"add","","",35,null],[11,"add_assign","","",35,null],[11,"add_assign","","",35,null],[11,"sub","","",35,null],[11,"sub","","",35,null],[11,"sub_assign","","",35,null],[11,"sub_assign","","",35,null],[11,"neg","","",35,null],[11,"dot","","",35,null],[11,"norm_squared","","",35,null],[11,"normalize","","",35,null],[11,"normalize_mut","","",35,null],[11,"try_normalize","","",35,null],[11,"try_normalize_mut","","",35,null],[11,"mean","","",35,null],[11,"approx_epsilon","","",35,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",35,null],[11,"approx_eq_ulps","","",35,null],[11,"new_zeros","","Builds a vector filled with zeros.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_ones","","Builds a vector filled with ones.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_random","","Builds a vector filled with random values.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",35,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",35,null],[11,"len","","The number of elements of this vector.",35,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"eq","","",35,null],[11,"clone","","",35,null],[11,"from_element","","Builds a vector filled with a constant.",35,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",35,null],[11,"from_fn","","Builds a vector filled with the result of a function.",35,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector5"}}],[11,"from_iter","","",35,{"inputs":[{"name":"i"}],"output":{"name":"dvector5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",37,null],[11,"as_ref","","",37,null],[11,"as_mut","","",37,null],[11,"shape","","",37,null],[11,"swap","","",37,null],[11,"unsafe_at","","",37,null],[11,"unsafe_set","","",37,null],[11,"index","","",37,null],[11,"index_mut","","",37,null],[11,"iter","","",37,null],[11,"iter_mut","","",37,null],[11,"axpy","","",37,null],[11,"mul","","",37,null],[11,"mul","","",37,null],[11,"mul_assign","","",37,null],[11,"mul_assign","","",37,null],[11,"div","","",37,null],[11,"div","","",37,null],[11,"div_assign","","",37,null],[11,"div_assign","","",37,null],[11,"add","","",37,null],[11,"add","","",37,null],[11,"add_assign","","",37,null],[11,"add_assign","","",37,null],[11,"sub","","",37,null],[11,"sub","","",37,null],[11,"sub_assign","","",37,null],[11,"sub_assign","","",37,null],[11,"neg","","",37,null],[11,"dot","","",37,null],[11,"norm_squared","","",37,null],[11,"normalize","","",37,null],[11,"normalize_mut","","",37,null],[11,"try_normalize","","",37,null],[11,"try_normalize_mut","","",37,null],[11,"mean","","",37,null],[11,"approx_epsilon","","",37,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",37,null],[11,"approx_eq_ulps","","",37,null],[11,"new_zeros","","Builds a vector filled with zeros.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_ones","","Builds a vector filled with ones.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_random","","Builds a vector filled with random values.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",37,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",37,null],[11,"len","","The number of elements of this vector.",37,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"eq","","",37,null],[11,"clone","","",37,null],[11,"from_element","","Builds a vector filled with a constant.",37,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",37,null],[11,"from_fn","","Builds a vector filled with the result of a function.",37,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector6"}}],[11,"from_iter","","",37,{"inputs":[{"name":"i"}],"output":{"name":"dvector6"}}],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"encode","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",11,null],[11,"add","","",11,null],[11,"add_assign","","",11,null],[11,"add","","",11,null],[11,"sub","","",11,null],[11,"sub_assign","","",11,null],[11,"sub","","",11,null],[11,"mul","","",11,null],[11,"mul_assign","","",11,null],[11,"mul","","",11,null],[11,"div","","",11,null],[11,"div_assign","","",11,null],[11,"div","","",11,null],[11,"zero","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"is_zero","","",11,null],[11,"one","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"abs","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"dot","","",11,null],[11,"norm_squared","","",11,null],[11,"normalize","","",11,null],[11,"normalize_mut","","",11,null],[11,"try_normalize","","",11,null],[11,"try_normalize_mut","","",11,null],[11,"translation","","",11,null],[11,"inverse_translation","","",11,null],[11,"append_translation_mut","","",11,null],[11,"append_translation","","",11,null],[11,"prepend_translation_mut","","",11,null],[11,"prepend_translation","","",11,null],[11,"set_translation","","",11,null],[11,"translate","","",11,null],[11,"inverse_translate","","",11,null],[11,"rotate","","",11,null],[11,"inverse_rotate","","",11,null],[11,"rotate","","",17,null],[11,"inverse_rotate","","",17,null],[11,"transform","","",11,null],[11,"inverse_transform","","",11,null],[11,"to_point","","Converts this vector to a point.",11,null],[11,"as_point","","Reinterprets this vector as a point.",11,null],[11,"mean","","",11,null],[11,"fmt","","",11,null],[11,"neg","","",11,null],[11,"repeat","","",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"vector1"}}],[11,"add_assign","","",11,null],[11,"add","","",11,null],[11,"add","","",11,null],[11,"sub_assign","","",11,null],[11,"sub","","",11,null],[11,"sub","","",11,null],[11,"mul_assign","","",11,null],[11,"mul","","",11,null],[11,"mul","","",11,null],[11,"div_assign","","",11,null],[11,"div","","",11,null],[11,"div","","",11,null],[11,"new","","Creation from component values.",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"inf","","",11,null],[11,"sup","","",11,null],[11,"partial_cmp","","",11,null],[11,"partial_lt","","",11,null],[11,"partial_le","","",11,null],[11,"partial_gt","","",11,null],[11,"partial_ge","","",11,null],[11,"from","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"approx_epsilon","","",11,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",11,null],[11,"approx_eq_eps","","",11,null],[11,"approx_eq_ulps","","",11,null],[11,"at_fast","","Unsafe read access to a vector element by index.",11,null],[11,"set_fast","","Unsafe write access to a vector element by index.",11,null],[11,"axpy","","",11,null],[11,"max_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"len","","The dimension of this entity.",11,null],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"from","","",11,null],[11,"dimension","","",11,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",11,null],[11,"swap","","",11,null],[11,"unsafe_at","","",11,null],[11,"unsafe_set","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"iter","","",11,null],[11,"iter_mut","","",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vector1"}}],[11,"to_homogeneous","","",11,null],[11,"from","","",11,{"inputs":[{"name":"vector2"}],"output":{"name":"vector1"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"encode","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"add","","",12,null],[11,"add_assign","","",12,null],[11,"add","","",12,null],[11,"sub","","",12,null],[11,"sub_assign","","",12,null],[11,"sub","","",12,null],[11,"mul","","",12,null],[11,"mul_assign","","",12,null],[11,"mul","","",12,null],[11,"div","","",12,null],[11,"div_assign","","",12,null],[11,"div","","",12,null],[11,"zero","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"is_zero","","",12,null],[11,"one","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"abs","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"y","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"dot","","",12,null],[11,"norm_squared","","",12,null],[11,"normalize","","",12,null],[11,"normalize_mut","","",12,null],[11,"try_normalize","","",12,null],[11,"try_normalize_mut","","",12,null],[11,"translation","","",12,null],[11,"inverse_translation","","",12,null],[11,"append_translation_mut","","",12,null],[11,"append_translation","","",12,null],[11,"prepend_translation_mut","","",12,null],[11,"prepend_translation","","",12,null],[11,"set_translation","","",12,null],[11,"translate","","",12,null],[11,"inverse_translate","","",12,null],[11,"rotate","","",12,null],[11,"inverse_rotate","","",12,null],[11,"rotate","","",18,null],[11,"inverse_rotate","","",18,null],[11,"transform","","",12,null],[11,"inverse_transform","","",12,null],[11,"to_point","","Converts this vector to a point.",12,null],[11,"as_point","","Reinterprets this vector as a point.",12,null],[11,"mean","","",12,null],[11,"fmt","","",12,null],[11,"neg","","",12,null],[11,"repeat","","",12,{"inputs":[{"name":"n"}],"output":{"name":"vector2"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"vector2"}}],[11,"add_assign","","",12,null],[11,"add","","",12,null],[11,"add","","",12,null],[11,"sub_assign","","",12,null],[11,"sub","","",12,null],[11,"sub","","",12,null],[11,"mul_assign","","",12,null],[11,"mul","","",12,null],[11,"mul","","",12,null],[11,"div_assign","","",12,null],[11,"div","","",12,null],[11,"div","","",12,null],[11,"new","","Creation from component values.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"inf","","",12,null],[11,"sup","","",12,null],[11,"partial_cmp","","",12,null],[11,"partial_lt","","",12,null],[11,"partial_le","","",12,null],[11,"partial_gt","","",12,null],[11,"partial_ge","","",12,null],[11,"from","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"approx_epsilon","","",12,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",12,null],[11,"approx_eq_eps","","",12,null],[11,"approx_eq_ulps","","",12,null],[11,"at_fast","","Unsafe read access to a vector element by index.",12,null],[11,"set_fast","","Unsafe write access to a vector element by index.",12,null],[11,"axpy","","",12,null],[11,"max_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"len","","The dimension of this entity.",12,null],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"from","","",12,null],[11,"dimension","","",12,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",12,null],[11,"swap","","",12,null],[11,"unsafe_at","","",12,null],[11,"unsafe_set","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"iter","","",12,null],[11,"iter_mut","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"vector2"}}],[11,"to_homogeneous","","",12,null],[11,"from","","",12,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"encode","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",13,null],[11,"add","","",13,null],[11,"add_assign","","",13,null],[11,"add","","",13,null],[11,"sub","","",13,null],[11,"sub_assign","","",13,null],[11,"sub","","",13,null],[11,"mul","","",13,null],[11,"mul_assign","","",13,null],[11,"mul","","",13,null],[11,"div","","",13,null],[11,"div_assign","","",13,null],[11,"div","","",13,null],[11,"zero","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"is_zero","","",13,null],[11,"one","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"abs","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"y","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"z","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"dot","","",13,null],[11,"norm_squared","","",13,null],[11,"normalize","","",13,null],[11,"normalize_mut","","",13,null],[11,"try_normalize","","",13,null],[11,"try_normalize_mut","","",13,null],[11,"translation","","",13,null],[11,"inverse_translation","","",13,null],[11,"append_translation_mut","","",13,null],[11,"append_translation","","",13,null],[11,"prepend_translation_mut","","",13,null],[11,"prepend_translation","","",13,null],[11,"set_translation","","",13,null],[11,"translate","","",13,null],[11,"inverse_translate","","",13,null],[11,"rotate","","",13,null],[11,"inverse_rotate","","",13,null],[11,"rotate","","",19,null],[11,"inverse_rotate","","",19,null],[11,"transform","","",13,null],[11,"inverse_transform","","",13,null],[11,"to_point","","Converts this vector to a point.",13,null],[11,"as_point","","Reinterprets this vector as a point.",13,null],[11,"mean","","",13,null],[11,"fmt","","",13,null],[11,"neg","","",13,null],[11,"repeat","","",13,{"inputs":[{"name":"n"}],"output":{"name":"vector3"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"vector3"}}],[11,"add_assign","","",13,null],[11,"add","","",13,null],[11,"add","","",13,null],[11,"sub_assign","","",13,null],[11,"sub","","",13,null],[11,"sub","","",13,null],[11,"mul_assign","","",13,null],[11,"mul","","",13,null],[11,"mul","","",13,null],[11,"div_assign","","",13,null],[11,"div","","",13,null],[11,"div","","",13,null],[11,"new","","Creation from component values.",13,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"inf","","",13,null],[11,"sup","","",13,null],[11,"partial_cmp","","",13,null],[11,"partial_lt","","",13,null],[11,"partial_le","","",13,null],[11,"partial_gt","","",13,null],[11,"partial_ge","","",13,null],[11,"from","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"approx_epsilon","","",13,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",13,null],[11,"approx_eq_eps","","",13,null],[11,"approx_eq_ulps","","",13,null],[11,"at_fast","","Unsafe read access to a vector element by index.",13,null],[11,"set_fast","","Unsafe write access to a vector element by index.",13,null],[11,"axpy","","",13,null],[11,"max_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"min_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"len","","The dimension of this entity.",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"dimension","","",13,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",13,null],[11,"swap","","",13,null],[11,"unsafe_at","","",13,null],[11,"unsafe_set","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"iter","","",13,null],[11,"iter_mut","","",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vector3"}}],[11,"to_homogeneous","","",13,null],[11,"from","","",13,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"encode","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",14,null],[11,"hash","","",14,null],[11,"fmt","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"add","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"sub","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"mul","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"div","","",14,null],[11,"zero","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"is_zero","","",14,null],[11,"one","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"abs","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"y","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"z","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"w","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"dot","","",14,null],[11,"norm_squared","","",14,null],[11,"normalize","","",14,null],[11,"normalize_mut","","",14,null],[11,"try_normalize","","",14,null],[11,"try_normalize_mut","","",14,null],[11,"translation","","",14,null],[11,"inverse_translation","","",14,null],[11,"append_translation_mut","","",14,null],[11,"append_translation","","",14,null],[11,"prepend_translation_mut","","",14,null],[11,"prepend_translation","","",14,null],[11,"set_translation","","",14,null],[11,"translate","","",14,null],[11,"inverse_translate","","",14,null],[11,"rotate","","",14,null],[11,"inverse_rotate","","",14,null],[11,"rotate","","",20,null],[11,"inverse_rotate","","",20,null],[11,"transform","","",14,null],[11,"inverse_transform","","",14,null],[11,"to_point","","Converts this vector to a point.",14,null],[11,"as_point","","Reinterprets this vector as a point.",14,null],[11,"mean","","",14,null],[11,"fmt","","",14,null],[11,"neg","","",14,null],[11,"repeat","","",14,{"inputs":[{"name":"n"}],"output":{"name":"vector4"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"vector4"}}],[11,"add_assign","","",14,null],[11,"add","","",14,null],[11,"add","","",14,null],[11,"sub_assign","","",14,null],[11,"sub","","",14,null],[11,"sub","","",14,null],[11,"mul_assign","","",14,null],[11,"mul","","",14,null],[11,"mul","","",14,null],[11,"div_assign","","",14,null],[11,"div","","",14,null],[11,"div","","",14,null],[11,"new","","Creation from component values.",14,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"inf","","",14,null],[11,"sup","","",14,null],[11,"partial_cmp","","",14,null],[11,"partial_lt","","",14,null],[11,"partial_le","","",14,null],[11,"partial_gt","","",14,null],[11,"partial_ge","","",14,null],[11,"from","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"approx_epsilon","","",14,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",14,null],[11,"approx_eq_eps","","",14,null],[11,"approx_eq_ulps","","",14,null],[11,"at_fast","","Unsafe read access to a vector element by index.",14,null],[11,"set_fast","","Unsafe write access to a vector element by index.",14,null],[11,"axpy","","",14,null],[11,"max_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"min_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"len","","The dimension of this entity.",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"dimension","","",14,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",14,null],[11,"swap","","",14,null],[11,"unsafe_at","","",14,null],[11,"unsafe_set","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"iter","","",14,null],[11,"iter_mut","","",14,null],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vector4"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vector4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",14,null],[11,"from","","",14,{"inputs":[{"name":"vector5"}],"output":{"name":"vector4"}}],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"encode","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",15,null],[11,"add","","",15,null],[11,"add_assign","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"sub_assign","","",15,null],[11,"sub","","",15,null],[11,"mul","","",15,null],[11,"mul_assign","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"div_assign","","",15,null],[11,"div","","",15,null],[11,"zero","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"is_zero","","",15,null],[11,"one","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"abs","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"y","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"z","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"w","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"a","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"dot","","",15,null],[11,"norm_squared","","",15,null],[11,"normalize","","",15,null],[11,"normalize_mut","","",15,null],[11,"try_normalize","","",15,null],[11,"try_normalize_mut","","",15,null],[11,"translation","","",15,null],[11,"inverse_translation","","",15,null],[11,"append_translation_mut","","",15,null],[11,"append_translation","","",15,null],[11,"prepend_translation_mut","","",15,null],[11,"prepend_translation","","",15,null],[11,"set_translation","","",15,null],[11,"translate","","",15,null],[11,"inverse_translate","","",15,null],[11,"rotate","","",15,null],[11,"inverse_rotate","","",15,null],[11,"rotate","","",21,null],[11,"inverse_rotate","","",21,null],[11,"transform","","",15,null],[11,"inverse_transform","","",15,null],[11,"to_point","","Converts this vector to a point.",15,null],[11,"as_point","","Reinterprets this vector as a point.",15,null],[11,"mean","","",15,null],[11,"fmt","","",15,null],[11,"neg","","",15,null],[11,"repeat","","",15,{"inputs":[{"name":"n"}],"output":{"name":"vector5"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"vector5"}}],[11,"add_assign","","",15,null],[11,"add","","",15,null],[11,"add","","",15,null],[11,"sub_assign","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"mul_assign","","",15,null],[11,"mul","","",15,null],[11,"mul","","",15,null],[11,"div_assign","","",15,null],[11,"div","","",15,null],[11,"div","","",15,null],[11,"new","","Creation from component values.",15,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"inf","","",15,null],[11,"sup","","",15,null],[11,"partial_cmp","","",15,null],[11,"partial_lt","","",15,null],[11,"partial_le","","",15,null],[11,"partial_gt","","",15,null],[11,"partial_ge","","",15,null],[11,"from","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"approx_epsilon","","",15,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",15,null],[11,"approx_eq_eps","","",15,null],[11,"approx_eq_ulps","","",15,null],[11,"at_fast","","Unsafe read access to a vector element by index.",15,null],[11,"set_fast","","Unsafe write access to a vector element by index.",15,null],[11,"axpy","","",15,null],[11,"max_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"min_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"len","","The dimension of this entity.",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"dimension","","",15,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",15,null],[11,"swap","","",15,null],[11,"unsafe_at","","",15,null],[11,"unsafe_set","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"iter","","",15,null],[11,"iter_mut","","",15,null],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"vector5"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vector5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",15,null],[11,"from","","",15,{"inputs":[{"name":"vector6"}],"output":{"name":"vector5"}}],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"encode","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",16,null],[11,"add","","",16,null],[11,"add_assign","","",16,null],[11,"add","","",16,null],[11,"sub","","",16,null],[11,"sub_assign","","",16,null],[11,"sub","","",16,null],[11,"mul","","",16,null],[11,"mul_assign","","",16,null],[11,"mul","","",16,null],[11,"div","","",16,null],[11,"div_assign","","",16,null],[11,"div","","",16,null],[11,"zero","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"is_zero","","",16,null],[11,"one","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"abs","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"x","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"y","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"z","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"w","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"a","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"b","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"dot","","",16,null],[11,"norm_squared","","",16,null],[11,"normalize","","",16,null],[11,"normalize_mut","","",16,null],[11,"try_normalize","","",16,null],[11,"try_normalize_mut","","",16,null],[11,"translation","","",16,null],[11,"inverse_translation","","",16,null],[11,"append_translation_mut","","",16,null],[11,"append_translation","","",16,null],[11,"prepend_translation_mut","","",16,null],[11,"prepend_translation","","",16,null],[11,"set_translation","","",16,null],[11,"translate","","",16,null],[11,"inverse_translate","","",16,null],[11,"rotate","","",16,null],[11,"inverse_rotate","","",16,null],[11,"rotate","","",22,null],[11,"inverse_rotate","","",22,null],[11,"transform","","",16,null],[11,"inverse_transform","","",16,null],[11,"to_point","","Converts this vector to a point.",16,null],[11,"as_point","","Reinterprets this vector as a point.",16,null],[11,"mean","","",16,null],[11,"fmt","","",16,null],[11,"neg","","",16,null],[11,"repeat","","",16,{"inputs":[{"name":"n"}],"output":{"name":"vector6"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"vector6"}}],[11,"add_assign","","",16,null],[11,"add","","",16,null],[11,"add","","",16,null],[11,"sub_assign","","",16,null],[11,"sub","","",16,null],[11,"sub","","",16,null],[11,"mul_assign","","",16,null],[11,"mul","","",16,null],[11,"mul","","",16,null],[11,"div_assign","","",16,null],[11,"div","","",16,null],[11,"div","","",16,null],[11,"new","","Creation from component values.",16,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"inf","","",16,null],[11,"sup","","",16,null],[11,"partial_cmp","","",16,null],[11,"partial_lt","","",16,null],[11,"partial_le","","",16,null],[11,"partial_gt","","",16,null],[11,"partial_ge","","",16,null],[11,"from","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"approx_epsilon","","",16,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",16,null],[11,"approx_eq_eps","","",16,null],[11,"approx_eq_ulps","","",16,null],[11,"at_fast","","Unsafe read access to a vector element by index.",16,null],[11,"set_fast","","Unsafe write access to a vector element by index.",16,null],[11,"axpy","","",16,null],[11,"max_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"min_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"len","","The dimension of this entity.",16,null],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"from","","",16,null],[11,"dimension","","",16,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",16,null],[11,"swap","","",16,null],[11,"unsafe_at","","",16,null],[11,"unsafe_set","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"iter","","",16,null],[11,"iter_mut","","",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"vector6"}}],[11,"canonical_basis","","",16,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",16,{"inputs":[{"name":"vector6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"encode","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",17,null],[11,"origin","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"is_origin","","",17,null],[11,"sub","","",17,null],[11,"add","","",17,null],[11,"add_assign","","",17,null],[11,"sub","","",17,null],[11,"sub_assign","","",17,null],[11,"to_vector","","Converts this point to its associated vector.",17,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",17,null],[11,"to_vector","","",17,null],[11,"as_vector","","",17,null],[11,"set_coords","","",17,null],[11,"fmt","","",17,null],[11,"to_homogeneous","","",17,null],[11,"from","","",17,{"inputs":[{"name":"point2"}],"output":{"name":"point1"}}],[11,"neg","","",17,null],[11,"repeat","","",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"point1"}}],[11,"add_assign","","",17,null],[11,"add","","",17,null],[11,"add","","",17,null],[11,"sub_assign","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"mul_assign","","",17,null],[11,"mul","","",17,null],[11,"mul","","",17,null],[11,"div_assign","","",17,null],[11,"div","","",17,null],[11,"div","","",17,null],[11,"new","","Creation from component values.",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"inf","","",17,null],[11,"sup","","",17,null],[11,"partial_cmp","","",17,null],[11,"partial_lt","","",17,null],[11,"partial_le","","",17,null],[11,"partial_gt","","",17,null],[11,"partial_ge","","",17,null],[11,"from","","",17,{"inputs":[{"name":"point1"}],"output":{"name":"point1"}}],[11,"approx_epsilon","","",17,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",17,null],[11,"approx_eq_eps","","",17,null],[11,"approx_eq_ulps","","",17,null],[11,"at_fast","","Unsafe read access to a vector element by index.",17,null],[11,"set_fast","","Unsafe write access to a vector element by index.",17,null],[11,"axpy","","",17,null],[11,"max_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"min_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"len","","The dimension of this entity.",17,null],[11,"as_ref","","",17,null],[11,"as_mut","","",17,null],[11,"from","","",17,null],[11,"dimension","","",17,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",17,null],[11,"swap","","",17,null],[11,"unsafe_at","","",17,null],[11,"unsafe_set","","",17,null],[11,"index","","",17,null],[11,"index_mut","","",17,null],[11,"iter","","",17,null],[11,"iter_mut","","",17,null],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"point1"}}],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"encode","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",18,null],[11,"hash","","",18,null],[11,"fmt","","",18,null],[11,"origin","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"is_origin","","",18,null],[11,"sub","","",18,null],[11,"add","","",18,null],[11,"add_assign","","",18,null],[11,"sub","","",18,null],[11,"sub_assign","","",18,null],[11,"to_vector","","Converts this point to its associated vector.",18,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",18,null],[11,"to_vector","","",18,null],[11,"as_vector","","",18,null],[11,"set_coords","","",18,null],[11,"fmt","","",18,null],[11,"to_homogeneous","","",18,null],[11,"from","","",18,{"inputs":[{"name":"point3"}],"output":{"name":"point2"}}],[11,"neg","","",18,null],[11,"repeat","","",18,{"inputs":[{"name":"n"}],"output":{"name":"point2"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"point2"}}],[11,"add_assign","","",18,null],[11,"add","","",18,null],[11,"add","","",18,null],[11,"sub_assign","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"mul_assign","","",18,null],[11,"mul","","",18,null],[11,"mul","","",18,null],[11,"div_assign","","",18,null],[11,"div","","",18,null],[11,"div","","",18,null],[11,"new","","Creation from component values.",18,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point2"}}],[11,"inf","","",18,null],[11,"sup","","",18,null],[11,"partial_cmp","","",18,null],[11,"partial_lt","","",18,null],[11,"partial_le","","",18,null],[11,"partial_gt","","",18,null],[11,"partial_ge","","",18,null],[11,"from","","",18,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"approx_epsilon","","",18,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",18,null],[11,"approx_eq_eps","","",18,null],[11,"approx_eq_ulps","","",18,null],[11,"at_fast","","Unsafe read access to a vector element by index.",18,null],[11,"set_fast","","Unsafe write access to a vector element by index.",18,null],[11,"axpy","","",18,null],[11,"max_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"min_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"len","","The dimension of this entity.",18,null],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"from","","",18,null],[11,"dimension","","",18,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",18,null],[11,"swap","","",18,null],[11,"unsafe_at","","",18,null],[11,"unsafe_set","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"iter","","",18,null],[11,"iter_mut","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"point2"}}],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"encode","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",19,null],[11,"hash","","",19,null],[11,"fmt","","",19,null],[11,"origin","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"is_origin","","",19,null],[11,"sub","","",19,null],[11,"add","","",19,null],[11,"add_assign","","",19,null],[11,"sub","","",19,null],[11,"sub_assign","","",19,null],[11,"to_vector","","Converts this point to its associated vector.",19,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",19,null],[11,"to_vector","","",19,null],[11,"as_vector","","",19,null],[11,"set_coords","","",19,null],[11,"fmt","","",19,null],[11,"to_homogeneous","","",19,null],[11,"from","","",19,{"inputs":[{"name":"point4"}],"output":{"name":"point3"}}],[11,"neg","","",19,null],[11,"repeat","","",19,{"inputs":[{"name":"n"}],"output":{"name":"point3"}}],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"point3"}}],[11,"add_assign","","",19,null],[11,"add","","",19,null],[11,"add","","",19,null],[11,"sub_assign","","",19,null],[11,"sub","","",19,null],[11,"sub","","",19,null],[11,"mul_assign","","",19,null],[11,"mul","","",19,null],[11,"mul","","",19,null],[11,"div_assign","","",19,null],[11,"div","","",19,null],[11,"div","","",19,null],[11,"new","","Creation from component values.",19,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point3"}}],[11,"inf","","",19,null],[11,"sup","","",19,null],[11,"partial_cmp","","",19,null],[11,"partial_lt","","",19,null],[11,"partial_le","","",19,null],[11,"partial_gt","","",19,null],[11,"partial_ge","","",19,null],[11,"from","","",19,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"approx_epsilon","","",19,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",19,null],[11,"approx_eq_eps","","",19,null],[11,"approx_eq_ulps","","",19,null],[11,"at_fast","","Unsafe read access to a vector element by index.",19,null],[11,"set_fast","","Unsafe write access to a vector element by index.",19,null],[11,"axpy","","",19,null],[11,"max_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"min_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"len","","The dimension of this entity.",19,null],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"from","","",19,null],[11,"dimension","","",19,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",19,null],[11,"swap","","",19,null],[11,"unsafe_at","","",19,null],[11,"unsafe_set","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"iter","","",19,null],[11,"iter_mut","","",19,null],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"point3"}}],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"encode","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",20,null],[11,"origin","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"is_origin","","",20,null],[11,"sub","","",20,null],[11,"add","","",20,null],[11,"add_assign","","",20,null],[11,"sub","","",20,null],[11,"sub_assign","","",20,null],[11,"to_vector","","Converts this point to its associated vector.",20,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",20,null],[11,"to_vector","","",20,null],[11,"as_vector","","",20,null],[11,"set_coords","","",20,null],[11,"fmt","","",20,null],[11,"to_homogeneous","","",20,null],[11,"from","","",20,{"inputs":[{"name":"point5"}],"output":{"name":"point4"}}],[11,"neg","","",20,null],[11,"repeat","","",20,{"inputs":[{"name":"n"}],"output":{"name":"point4"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"point4"}}],[11,"add_assign","","",20,null],[11,"add","","",20,null],[11,"add","","",20,null],[11,"sub_assign","","",20,null],[11,"sub","","",20,null],[11,"sub","","",20,null],[11,"mul_assign","","",20,null],[11,"mul","","",20,null],[11,"mul","","",20,null],[11,"div_assign","","",20,null],[11,"div","","",20,null],[11,"div","","",20,null],[11,"new","","Creation from component values.",20,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point4"}}],[11,"inf","","",20,null],[11,"sup","","",20,null],[11,"partial_cmp","","",20,null],[11,"partial_lt","","",20,null],[11,"partial_le","","",20,null],[11,"partial_gt","","",20,null],[11,"partial_ge","","",20,null],[11,"from","","",20,{"inputs":[{"name":"point4"}],"output":{"name":"point4"}}],[11,"approx_epsilon","","",20,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",20,null],[11,"approx_eq_eps","","",20,null],[11,"approx_eq_ulps","","",20,null],[11,"at_fast","","Unsafe read access to a vector element by index.",20,null],[11,"set_fast","","Unsafe write access to a vector element by index.",20,null],[11,"axpy","","",20,null],[11,"max_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"min_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"len","","The dimension of this entity.",20,null],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"from","","",20,null],[11,"dimension","","",20,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",20,null],[11,"swap","","",20,null],[11,"unsafe_at","","",20,null],[11,"unsafe_set","","",20,null],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"iter","","",20,null],[11,"iter_mut","","",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"point4"}}],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"encode","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"origin","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"is_origin","","",21,null],[11,"sub","","",21,null],[11,"add","","",21,null],[11,"add_assign","","",21,null],[11,"sub","","",21,null],[11,"sub_assign","","",21,null],[11,"to_vector","","Converts this point to its associated vector.",21,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",21,null],[11,"to_vector","","",21,null],[11,"as_vector","","",21,null],[11,"set_coords","","",21,null],[11,"fmt","","",21,null],[11,"to_homogeneous","","",21,null],[11,"from","","",21,{"inputs":[{"name":"point6"}],"output":{"name":"point5"}}],[11,"neg","","",21,null],[11,"repeat","","",21,{"inputs":[{"name":"n"}],"output":{"name":"point5"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"point5"}}],[11,"add_assign","","",21,null],[11,"add","","",21,null],[11,"add","","",21,null],[11,"sub_assign","","",21,null],[11,"sub","","",21,null],[11,"sub","","",21,null],[11,"mul_assign","","",21,null],[11,"mul","","",21,null],[11,"mul","","",21,null],[11,"div_assign","","",21,null],[11,"div","","",21,null],[11,"div","","",21,null],[11,"new","","Creation from component values.",21,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point5"}}],[11,"inf","","",21,null],[11,"sup","","",21,null],[11,"partial_cmp","","",21,null],[11,"partial_lt","","",21,null],[11,"partial_le","","",21,null],[11,"partial_gt","","",21,null],[11,"partial_ge","","",21,null],[11,"from","","",21,{"inputs":[{"name":"point5"}],"output":{"name":"point5"}}],[11,"approx_epsilon","","",21,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",21,null],[11,"approx_eq_eps","","",21,null],[11,"approx_eq_ulps","","",21,null],[11,"at_fast","","Unsafe read access to a vector element by index.",21,null],[11,"set_fast","","Unsafe write access to a vector element by index.",21,null],[11,"axpy","","",21,null],[11,"max_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"min_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"len","","The dimension of this entity.",21,null],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"from","","",21,null],[11,"dimension","","",21,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",21,null],[11,"swap","","",21,null],[11,"unsafe_at","","",21,null],[11,"unsafe_set","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"iter","","",21,null],[11,"iter_mut","","",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"point5"}}],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"encode","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",22,null],[11,"hash","","",22,null],[11,"fmt","","",22,null],[11,"origin","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"is_origin","","",22,null],[11,"sub","","",22,null],[11,"add","","",22,null],[11,"add_assign","","",22,null],[11,"sub","","",22,null],[11,"sub_assign","","",22,null],[11,"to_vector","","Converts this point to its associated vector.",22,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",22,null],[11,"to_vector","","",22,null],[11,"as_vector","","",22,null],[11,"set_coords","","",22,null],[11,"fmt","","",22,null],[11,"neg","","",22,null],[11,"repeat","","",22,{"inputs":[{"name":"n"}],"output":{"name":"point6"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"point6"}}],[11,"add_assign","","",22,null],[11,"add","","",22,null],[11,"add","","",22,null],[11,"sub_assign","","",22,null],[11,"sub","","",22,null],[11,"sub","","",22,null],[11,"mul_assign","","",22,null],[11,"mul","","",22,null],[11,"mul","","",22,null],[11,"div_assign","","",22,null],[11,"div","","",22,null],[11,"div","","",22,null],[11,"new","","Creation from component values.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point6"}}],[11,"inf","","",22,null],[11,"sup","","",22,null],[11,"partial_cmp","","",22,null],[11,"partial_lt","","",22,null],[11,"partial_le","","",22,null],[11,"partial_gt","","",22,null],[11,"partial_ge","","",22,null],[11,"from","","",22,{"inputs":[{"name":"point6"}],"output":{"name":"point6"}}],[11,"approx_epsilon","","",22,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",22,null],[11,"approx_eq_eps","","",22,null],[11,"approx_eq_ulps","","",22,null],[11,"at_fast","","Unsafe read access to a vector element by index.",22,null],[11,"set_fast","","Unsafe write access to a vector element by index.",22,null],[11,"axpy","","",22,null],[11,"max_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"min_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"len","","The dimension of this entity.",22,null],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"from","","",22,null],[11,"dimension","","",22,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",22,null],[11,"swap","","",22,null],[11,"unsafe_at","","",22,null],[11,"unsafe_set","","",22,null],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"iter","","",22,null],[11,"iter_mut","","",22,null],[11,"from_iter","","",22,{"inputs":[{"name":"i"}],"output":{"name":"point6"}}],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"encode","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",23,null],[11,"scalar","","The scalar part `w` of this quaternion.",23,null],[11,"conjugate","","Compute the conjugate of this quaternion.",23,null],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",23,null],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts.",23,{"inputs":[{"name":"n"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"unit"}],"output":{"name":"quaternion"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",23,null],[11,"inverse","","",23,null],[11,"inverse_mut","","",23,null],[11,"norm_squared","","",23,null],[11,"normalize","","",23,null],[11,"normalize_mut","","",23,null],[11,"try_normalize","","",23,null],[11,"try_normalize_mut","","",23,null],[11,"mul","","",23,null],[11,"mul_assign","","",23,null],[11,"div","","",23,null],[11,"div_assign","","",23,null],[11,"exp","","Compute the exponential of a quaternion.",23,null],[11,"ln","","Compute the natural logarithm of a quaternion.",23,null],[11,"powf","","Raise the quaternion to a given floating power.",23,null],[11,"one","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,null],[11,"mul","","",13,null],[11,"mul","","",19,null],[11,"mul_assign","","",13,null],[11,"mul_assign","","",19,null],[11,"zero","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"is_zero","","",23,null],[11,"w","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"i","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"j","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"k","","Create the element of the canonical basis having this component set to one and\nall the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"add","","",23,null],[11,"add_assign","","",23,null],[11,"add","","",23,null],[11,"sub","","",23,null],[11,"sub_assign","","",23,null],[11,"sub","","",23,null],[11,"from_iter","","",23,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"neg","","",23,null],[11,"repeat","","",23,{"inputs":[{"name":"n"}],"output":{"name":"quaternion"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"quaternion"}}],[11,"add_assign","","",23,null],[11,"add","","",23,null],[11,"add","","",23,null],[11,"sub_assign","","",23,null],[11,"sub","","",23,null],[11,"sub","","",23,null],[11,"mul_assign","","",23,null],[11,"mul","","",23,null],[11,"mul","","",23,null],[11,"div_assign","","",23,null],[11,"div","","",23,null],[11,"div","","",23,null],[11,"new","","Creation from component values.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"inf","","",23,null],[11,"sup","","",23,null],[11,"partial_cmp","","",23,null],[11,"partial_lt","","",23,null],[11,"partial_le","","",23,null],[11,"partial_gt","","",23,null],[11,"partial_ge","","",23,null],[11,"from","","",23,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"approx_epsilon","","",23,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",23,null],[11,"approx_eq_eps","","",23,null],[11,"approx_eq_ulps","","",23,null],[11,"at_fast","","Unsafe read access to a vector element by index.",23,null],[11,"set_fast","","Unsafe write access to a vector element by index.",23,null],[11,"axpy","","",23,null],[11,"max_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"min_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"len","","The dimension of this entity.",23,null],[11,"as_ref","","",23,null],[11,"as_mut","","",23,null],[11,"from","","",23,null],[11,"dimension","","",23,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",23,null],[11,"swap","","",23,null],[11,"unsafe_at","","",23,null],[11,"unsafe_set","","",23,null],[11,"index","","",23,null],[11,"index_mut","","",23,null],[11,"iter","","",23,null],[11,"iter_mut","","",23,null],[11,"eq","","",38,null],[11,"encode","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"new","","Creates a new identity matrix.",38,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",38,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"new_identity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"matrix1"}}],[11,"new","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"from","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"iter","","",5,null],[11,"iter_mut","","",5,null],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"ncols","","",5,null],[11,"set_column","","",5,null],[11,"column","","",5,null],[11,"column_slice","","",5,null],[11,"nrows","","",5,null],[11,"set_row","","",5,null],[11,"row","","",5,null],[11,"row_slice","","",5,null],[11,"transpose","","",5,null],[11,"transpose_mut","","",5,null],[11,"approx_epsilon","","",5,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,null],[11,"approx_eq_ulps","","",5,null],[11,"mean","","",5,null],[11,"from_diagonal","","",5,{"inputs":[{"name":"vector1"}],"output":{"name":"matrix1"}}],[11,"diagonal","","",5,null],[11,"outer","","",11,null],[11,"repeat","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"abs","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"is_zero","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"sub","","",5,null],[11,"add_assign","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub_assign","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"div_assign","","",5,null],[11,"div","","",5,null],[11,"div","","",5,null],[11,"mul_assign","","",5,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"dimension","","",5,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"mul","","",5,null],[11,"mul","","",11,null],[11,"mul_assign","","",11,null],[11,"mul","","",5,null],[11,"mul","","",17,null],[11,"mul_assign","","",17,null],[11,"to_homogeneous","","",5,null],[11,"from","","",5,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix1"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"matrix1"}}],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"encode","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"new_identity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"matrix2"}}],[11,"new","","",6,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"from","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"iter","","",6,null],[11,"iter_mut","","",6,null],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"ncols","","",6,null],[11,"set_column","","",6,null],[11,"column","","",6,null],[11,"column_slice","","",6,null],[11,"nrows","","",6,null],[11,"set_row","","",6,null],[11,"row","","",6,null],[11,"row_slice","","",6,null],[11,"transpose","","",6,null],[11,"transpose_mut","","",6,null],[11,"approx_epsilon","","",6,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,null],[11,"approx_eq_ulps","","",6,null],[11,"mean","","",6,null],[11,"from_diagonal","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"diagonal","","",6,null],[11,"outer","","",12,null],[11,"repeat","","",6,{"inputs":[{"name":"n"}],"output":{"name":"matrix2"}}],[11,"abs","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"is_zero","","",6,null],[11,"add","","",6,null],[11,"add_assign","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub_assign","","",6,null],[11,"sub","","",6,null],[11,"add_assign","","",6,null],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub_assign","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"div_assign","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"mul_assign","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"dimension","","",6,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"to_homogeneous","","",6,null],[11,"from","","",6,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix2"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"matrix2"}}],[11,"fmt","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"encode","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"new_identity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"matrix3"}}],[11,"new","","",7,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"from","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"iter","","",7,null],[11,"iter_mut","","",7,null],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"ncols","","",7,null],[11,"set_column","","",7,null],[11,"column","","",7,null],[11,"column_slice","","",7,null],[11,"nrows","","",7,null],[11,"set_row","","",7,null],[11,"row","","",7,null],[11,"row_slice","","",7,null],[11,"transpose","","",7,null],[11,"transpose_mut","","",7,null],[11,"approx_epsilon","","",7,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,null],[11,"approx_eq_ulps","","",7,null],[11,"mean","","",7,null],[11,"from_diagonal","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"diagonal","","",7,null],[11,"outer","","",13,null],[11,"repeat","","",7,{"inputs":[{"name":"n"}],"output":{"name":"matrix3"}}],[11,"abs","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",7,null],[11,"add","","",7,null],[11,"add_assign","","",7,null],[11,"add","","",7,null],[11,"sub","","",7,null],[11,"sub_assign","","",7,null],[11,"sub","","",7,null],[11,"add_assign","","",7,null],[11,"add","","",7,null],[11,"add","","",7,null],[11,"sub_assign","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"div_assign","","",7,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"mul_assign","","",7,null],[11,"mul","","",7,null],[11,"mul","","",7,null],[11,"one","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"dimension","","",7,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"to_homogeneous","","",7,null],[11,"from","","",7,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix3"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"matrix3"}}],[11,"fmt","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"new_identity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"matrix4"}}],[11,"new","","",8,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"from","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"iter","","",8,null],[11,"iter_mut","","",8,null],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"ncols","","",8,null],[11,"set_column","","",8,null],[11,"column","","",8,null],[11,"column_slice","","",8,null],[11,"nrows","","",8,null],[11,"set_row","","",8,null],[11,"row","","",8,null],[11,"row_slice","","",8,null],[11,"transpose","","",8,null],[11,"transpose_mut","","",8,null],[11,"approx_epsilon","","",8,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,null],[11,"approx_eq_ulps","","",8,null],[11,"mean","","",8,null],[11,"from_diagonal","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"diagonal","","",8,null],[11,"outer","","",14,null],[11,"repeat","","",8,{"inputs":[{"name":"n"}],"output":{"name":"matrix4"}}],[11,"abs","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"is_zero","","",8,null],[11,"add","","",8,null],[11,"add_assign","","",8,null],[11,"add","","",8,null],[11,"sub","","",8,null],[11,"sub_assign","","",8,null],[11,"sub","","",8,null],[11,"add_assign","","",8,null],[11,"add","","",8,null],[11,"add","","",8,null],[11,"sub_assign","","",8,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"div_assign","","",8,null],[11,"div","","",8,null],[11,"div","","",8,null],[11,"mul_assign","","",8,null],[11,"mul","","",8,null],[11,"mul","","",8,null],[11,"one","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"dimension","","",8,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",8,null],[11,"mul_assign","","",8,null],[11,"mul","","",8,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"mul","","",8,null],[11,"mul","","",20,null],[11,"mul_assign","","",20,null],[11,"inverse","","",8,null],[11,"inverse_mut","","",8,null],[11,"to_homogeneous","","",8,null],[11,"from","","",8,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix4"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"matrix4"}}],[11,"fmt","","",8,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"encode","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",9,null],[11,"new_identity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"matrix5"}}],[11,"new","","",9,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"from","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"iter","","",9,null],[11,"iter_mut","","",9,null],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"ncols","","",9,null],[11,"set_column","","",9,null],[11,"column","","",9,null],[11,"column_slice","","",9,null],[11,"nrows","","",9,null],[11,"set_row","","",9,null],[11,"row","","",9,null],[11,"row_slice","","",9,null],[11,"transpose","","",9,null],[11,"transpose_mut","","",9,null],[11,"approx_epsilon","","",9,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,null],[11,"approx_eq_ulps","","",9,null],[11,"mean","","",9,null],[11,"from_diagonal","","",9,{"inputs":[{"name":"vector5"}],"output":{"name":"matrix5"}}],[11,"diagonal","","",9,null],[11,"outer","","",15,null],[11,"repeat","","",9,{"inputs":[{"name":"n"}],"output":{"name":"matrix5"}}],[11,"abs","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"is_zero","","",9,null],[11,"add","","",9,null],[11,"add_assign","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"sub_assign","","",9,null],[11,"sub","","",9,null],[11,"add_assign","","",9,null],[11,"add","","",9,null],[11,"add","","",9,null],[11,"sub_assign","","",9,null],[11,"sub","","",9,null],[11,"sub","","",9,null],[11,"div_assign","","",9,null],[11,"div","","",9,null],[11,"div","","",9,null],[11,"mul_assign","","",9,null],[11,"mul","","",9,null],[11,"mul","","",9,null],[11,"one","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"dimension","","",9,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",9,null],[11,"mul_assign","","",9,null],[11,"mul","","",9,null],[11,"mul","","",15,null],[11,"mul_assign","","",15,null],[11,"mul","","",9,null],[11,"mul","","",21,null],[11,"mul_assign","","",21,null],[11,"inverse","","",9,null],[11,"inverse_mut","","",9,null],[11,"to_homogeneous","","",9,null],[11,"from","","",9,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix5"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"matrix5"}}],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",10,null],[11,"new_identity","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"matrix6"}}],[11,"new","","",10,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"from","","",10,null],[11,"at_fast","","",10,null],[11,"set_fast","","",10,null],[11,"from","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"iter","","",10,null],[11,"iter_mut","","",10,null],[11,"shape","","",10,null],[11,"swap","","",10,null],[11,"unsafe_at","","",10,null],[11,"unsafe_set","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"ncols","","",10,null],[11,"set_column","","",10,null],[11,"column","","",10,null],[11,"column_slice","","",10,null],[11,"nrows","","",10,null],[11,"set_row","","",10,null],[11,"row","","",10,null],[11,"row_slice","","",10,null],[11,"transpose","","",10,null],[11,"transpose_mut","","",10,null],[11,"approx_epsilon","","",10,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",10,null],[11,"approx_eq_ulps","","",10,null],[11,"mean","","",10,null],[11,"from_diagonal","","",10,{"inputs":[{"name":"vector6"}],"output":{"name":"matrix6"}}],[11,"diagonal","","",10,null],[11,"outer","","",16,null],[11,"repeat","","",10,{"inputs":[{"name":"n"}],"output":{"name":"matrix6"}}],[11,"abs","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"is_zero","","",10,null],[11,"add","","",10,null],[11,"add_assign","","",10,null],[11,"add","","",10,null],[11,"sub","","",10,null],[11,"sub_assign","","",10,null],[11,"sub","","",10,null],[11,"add_assign","","",10,null],[11,"add","","",10,null],[11,"add","","",10,null],[11,"sub_assign","","",10,null],[11,"sub","","",10,null],[11,"sub","","",10,null],[11,"div_assign","","",10,null],[11,"div","","",10,null],[11,"div","","",10,null],[11,"mul_assign","","",10,null],[11,"mul","","",10,null],[11,"mul","","",10,null],[11,"one","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"dimension","","",10,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",10,null],[11,"mul_assign","","",10,null],[11,"mul","","",10,null],[11,"mul","","",16,null],[11,"mul_assign","","",16,null],[11,"mul","","",10,null],[11,"mul","","",22,null],[11,"mul_assign","","",22,null],[11,"inverse","","",10,null],[11,"inverse_mut","","",10,null],[11,"eigen_qr","","",10,null],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"matrix6"}}],[11,"fmt","","",10,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"encode","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"hash","","",39,null],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",39,{"inputs":[{"name":"vector1"}],"output":{"name":"rotation2"}}],[11,"rotation","","",39,null],[11,"inverse_rotation","","",39,null],[11,"append_rotation_mut","","",39,null],[11,"append_rotation","","",39,null],[11,"prepend_rotation_mut","","",39,null],[11,"prepend_rotation","","",39,null],[11,"set_rotation","","",39,null],[11,"angle_to","","",39,null],[11,"rotation_to","","",39,null],[11,"rand","","",39,{"inputs":[{"name":"r"}],"output":{"name":"rotation2"}}],[11,"absolute_rotate","","",39,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"encode","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",40,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"from_matrix_unchecked","","Builds a rotation matrix from an orthogonal matrix.",40,{"inputs":[{"name":"matrix3"}],"output":{"name":"rotation3"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",40,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rotation3"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the\norigin and looking toward `dir`.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"rotation","","",40,null],[11,"inverse_rotation","","",40,null],[11,"append_rotation_mut","","",40,null],[11,"append_rotation","","",40,null],[11,"prepend_rotation_mut","","",40,null],[11,"prepend_rotation","","",40,null],[11,"set_rotation","","",40,null],[11,"angle_to","","",40,null],[11,"rotation_to","","",40,null],[11,"rand","","",40,{"inputs":[{"name":"r"}],"output":{"name":"rotation3"}}],[11,"absolute_rotate","","",40,null],[11,"submatrix","","This rotation&#39;s underlying matrix.",39,null],[11,"rotate","","",39,null],[11,"inverse_rotate","","",39,null],[11,"rotate","","",39,null],[11,"inverse_rotate","","",39,null],[11,"transform","","",39,null],[11,"inverse_transform","","",39,null],[11,"transform","","",39,null],[11,"inverse_transform","","",39,null],[11,"to_rotation_matrix","","",39,null],[11,"one","","",39,{"inputs":[],"output":{"name":"rotation2"}}],[11,"new_identity","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"rotation2"}}],[11,"from_diagonal","","",39,{"inputs":[{"name":"vector2"}],"output":{"name":"rotation2"}}],[11,"diagonal","","",39,null],[11,"mul","","",39,null],[11,"mul_assign","","",39,null],[11,"mul","","",39,null],[11,"mul","","",12,null],[11,"mul_assign","","",12,null],[11,"mul","","",39,null],[11,"mul","","",18,null],[11,"mul_assign","","",18,null],[11,"inverse_mut","","",39,null],[11,"inverse","","",39,null],[11,"transpose","","",39,null],[11,"transpose_mut","","",39,null],[11,"nrows","","",39,null],[11,"row","","",39,null],[11,"set_row","","",39,null],[11,"ncols","","",39,null],[11,"column","","",39,null],[11,"set_column","","",39,null],[11,"index","","",39,null],[11,"to_homogeneous","","",39,null],[11,"approx_epsilon","","",39,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",39,null],[11,"approx_eq_eps","","",39,null],[11,"approx_eq_ulps","","",39,null],[11,"abs","","",39,{"inputs":[{"name":"rotation2"}],"output":{"name":"matrix2"}}],[11,"fmt","","",39,null],[11,"dimension","","",39,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"submatrix","","This rotation&#39;s underlying matrix.",40,null],[11,"rotate","","",40,null],[11,"inverse_rotate","","",40,null],[11,"rotate","","",40,null],[11,"inverse_rotate","","",40,null],[11,"transform","","",40,null],[11,"inverse_transform","","",40,null],[11,"transform","","",40,null],[11,"inverse_transform","","",40,null],[11,"to_rotation_matrix","","",40,null],[11,"one","","",40,{"inputs":[],"output":{"name":"rotation3"}}],[11,"new_identity","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"rotation3"}}],[11,"from_diagonal","","",40,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"diagonal","","",40,null],[11,"mul","","",40,null],[11,"mul_assign","","",40,null],[11,"mul","","",40,null],[11,"mul","","",13,null],[11,"mul_assign","","",13,null],[11,"mul","","",40,null],[11,"mul","","",19,null],[11,"mul_assign","","",19,null],[11,"inverse_mut","","",40,null],[11,"inverse","","",40,null],[11,"transpose","","",40,null],[11,"transpose_mut","","",40,null],[11,"nrows","","",40,null],[11,"row","","",40,null],[11,"set_row","","",40,null],[11,"ncols","","",40,null],[11,"column","","",40,null],[11,"set_column","","",40,null],[11,"index","","",40,null],[11,"to_homogeneous","","",40,null],[11,"approx_epsilon","","",40,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",40,null],[11,"approx_eq_eps","","",40,null],[11,"approx_eq_ulps","","",40,null],[11,"abs","","",40,{"inputs":[{"name":"rotation3"}],"output":{"name":"matrix3"}}],[11,"fmt","","",40,null],[11,"dimension","","",40,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the\npoint `eye` and looking toward `target`.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"vector1"}],"output":{"name":"isometry2"}}],[11,"from_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"rotation2"}],"output":{"name":"isometry2"}}],[11,"to_rotation_matrix","","",1,null],[11,"one","","",1,{"inputs":[],"output":{"name":"isometry2"}}],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",39,null],[11,"mul_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"translation","","",1,null],[11,"inverse_translation","","",1,null],[11,"append_translation_mut","","",1,null],[11,"append_translation","","",1,null],[11,"prepend_translation_mut","","",1,null],[11,"prepend_translation","","",1,null],[11,"set_translation","","",1,null],[11,"translate","","",1,null],[11,"inverse_translate","","",1,null],[11,"rotation","","",1,null],[11,"inverse_rotation","","",1,null],[11,"append_rotation_mut","","",1,null],[11,"append_rotation","","",1,null],[11,"prepend_rotation_mut","","",1,null],[11,"prepend_rotation","","",1,null],[11,"set_rotation","","",1,null],[11,"rotate","","",1,null],[11,"inverse_rotate","","",1,null],[11,"transformation","","",1,null],[11,"inverse_transformation","","",1,null],[11,"append_transformation_mut","","",1,null],[11,"append_transformation","","",1,null],[11,"prepend_transformation_mut","","",1,null],[11,"prepend_transformation","","",1,null],[11,"set_transformation","","",1,null],[11,"transform","","",1,null],[11,"inverse_transform","","",1,null],[11,"inverse_mut","","",1,null],[11,"inverse","","",1,null],[11,"to_homogeneous","","",1,null],[11,"approx_epsilon","","",1,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,null],[11,"approx_eq_ulps","","",1,null],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"isometry2"}}],[11,"absolute_rotate","","",1,null],[11,"fmt","","",1,null],[11,"dimension","","",1,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"from_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"rotation3"}],"output":{"name":"isometry3"}}],[11,"to_rotation_matrix","","",2,null],[11,"one","","",2,{"inputs":[],"output":{"name":"isometry3"}}],[11,"mul","","",2,null],[11,"mul_assign","","",2,null],[11,"mul","","",2,null],[11,"mul","","",40,null],[11,"mul_assign","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"translation","","",2,null],[11,"inverse_translation","","",2,null],[11,"append_translation_mut","","",2,null],[11,"append_translation","","",2,null],[11,"prepend_translation_mut","","",2,null],[11,"prepend_translation","","",2,null],[11,"set_translation","","",2,null],[11,"translate","","",2,null],[11,"inverse_translate","","",2,null],[11,"rotation","","",2,null],[11,"inverse_rotation","","",2,null],[11,"append_rotation_mut","","",2,null],[11,"append_rotation","","",2,null],[11,"prepend_rotation_mut","","",2,null],[11,"prepend_rotation","","",2,null],[11,"set_rotation","","",2,null],[11,"rotate","","",2,null],[11,"inverse_rotate","","",2,null],[11,"transformation","","",2,null],[11,"inverse_transformation","","",2,null],[11,"append_transformation_mut","","",2,null],[11,"append_transformation","","",2,null],[11,"prepend_transformation_mut","","",2,null],[11,"prepend_transformation","","",2,null],[11,"set_transformation","","",2,null],[11,"transform","","",2,null],[11,"inverse_transform","","",2,null],[11,"inverse_mut","","",2,null],[11,"inverse","","",2,null],[11,"to_homogeneous","","",2,null],[11,"approx_epsilon","","",2,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,null],[11,"approx_eq_ulps","","",2,null],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"isometry3"}}],[11,"absolute_rotate","","",2,null],[11,"fmt","","",2,null],[11,"dimension","","",2,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"vector1"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"from_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"rotation2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"from_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",3,{"inputs":[{"name":"isometry2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"scale","","The scale factor of this similarity transformation.",3,null],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",3,null],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",3,null],[11,"append_scale","","Appends a scale to this similarity transformation.",3,null],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",3,null],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",3,null],[11,"set_scale","","Sets the scale of this similarity transformation.",3,null],[11,"one","","",3,{"inputs":[],"output":{"name":"similarity2"}}],[11,"transformation","","",3,null],[11,"inverse_transformation","","",3,null],[11,"append_transformation_mut","","",3,null],[11,"append_transformation","","",3,null],[11,"prepend_transformation_mut","","",3,null],[11,"prepend_transformation","","",3,null],[11,"set_transformation","","",3,null],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",1,null],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",39,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"transform","","",3,null],[11,"inverse_transform","","",3,null],[11,"inverse_mut","","",3,null],[11,"inverse","","",3,null],[11,"to_homogeneous","","",3,null],[11,"approx_epsilon","","",3,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,null],[11,"approx_eq_ulps","","",3,null],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"similarity2"}}],[11,"fmt","","",3,null],[11,"dimension","","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"from_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"rotation3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"from_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",4,{"inputs":[{"name":"isometry3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"scale","","The scale factor of this similarity transformation.",4,null],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",4,null],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",4,null],[11,"append_scale","","Appends a scale to this similarity transformation.",4,null],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",4,null],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",4,null],[11,"set_scale","","Sets the scale of this similarity transformation.",4,null],[11,"one","","",4,{"inputs":[],"output":{"name":"similarity3"}}],[11,"transformation","","",4,null],[11,"inverse_transformation","","",4,null],[11,"append_transformation_mut","","",4,null],[11,"append_transformation","","",4,null],[11,"prepend_transformation_mut","","",4,null],[11,"prepend_transformation","","",4,null],[11,"set_transformation","","",4,null],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",2,null],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",40,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"transform","","",4,null],[11,"inverse_transform","","",4,null],[11,"inverse_mut","","",4,null],[11,"inverse","","",4,null],[11,"to_homogeneous","","",4,null],[11,"approx_epsilon","","",4,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,null],[11,"approx_eq_ulps","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"similarity3"}}],[11,"fmt","","",4,null],[11,"dimension","","",4,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"encode","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"encode","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"new","","Creates a new 3D perspective projection.",41,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspective3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",41,null],[11,"to_perspective_matrix","","Build a `PerspectiveMatrix3` representing this projection.",41,null],[11,"aspect","","Gets the `width / height` aspect ratio.",41,null],[11,"fovy","","Gets the y field of view of the view frustrum.",41,null],[11,"znear","","Gets the near plane offset of the view frustrum.",41,null],[11,"zfar","","Gets the far plane offset of the view frustrum.",41,null],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",41,null],[11,"set_fovy","","Sets the y field of view of the view frustrum.",41,null],[11,"set_znear","","Sets the near plane offset of the view frustrum.",41,null],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",41,null],[11,"project_point","","Projects a point.",41,null],[11,"project_vector","","Projects a vector.",41,null],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",42,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspectivematrix3"}}],[11,"from_matrix_unchecked","","Creates a new perspective projection matrix from a 4D matrix.",42,{"inputs":[{"name":"matrix4"}],"output":{"name":"perspectivematrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",42,null],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",42,null],[11,"fovy","","Gets the y field of view of the view frustrum.",42,null],[11,"znear","","Gets the near plane offset of the view frustrum.",42,null],[11,"zfar","","Gets the far plane offset of the view frustrum.",42,null],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",42,null],[11,"set_fovy","","Updates this projection with a new y field of view of the view frustrum.",42,null],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",42,null],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",42,null],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",42,null],[11,"project_point","","Projects a point.",42,null],[11,"project_vector","","Projects a vector.",42,null],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",42,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"encode","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"encode","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"new","","Creates a new 3D orthographic projection.",43,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographic3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",43,null],[11,"to_orthographic_matrix","","Build a `OrthographicMatrix3` representing this projection.",43,null],[11,"left","","The smallest x-coordinate of the view cuboid.",43,null],[11,"right","","The largest x-coordinate of the view cuboid.",43,null],[11,"bottom","","The smallest y-coordinate of the view cuboid.",43,null],[11,"top","","The largest y-coordinate of the view cuboid.",43,null],[11,"znear","","The near plane offset of the view cuboid.",43,null],[11,"zfar","","The far plane offset of the view cuboid.",43,null],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",43,null],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",43,null],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",43,null],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",43,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",43,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",43,null],[11,"project_point","","Projects a point.",43,null],[11,"project_vector","","Projects a vector.",43,null],[11,"new","","Creates a new orthographic projection matrix.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"from_matrix_unchecked","","Creates a new orthographic matrix from a 4D matrix.",44,{"inputs":[{"name":"matrix4"}],"output":{"name":"orthographicmatrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",44,null],[11,"left","","The smallest x-coordinate of the view cuboid.",44,null],[11,"right","","The largest x-coordinate of the view cuboid.",44,null],[11,"bottom","","The smallest y-coordinate of the view cuboid.",44,null],[11,"top","","The largest y-coordinate of the view cuboid.",44,null],[11,"znear","","The near plane offset of the view cuboid.",44,null],[11,"zfar","","The far plane offset of the view cuboid.",44,null],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",44,null],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",44,null],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",44,null],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",44,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",44,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",44,null],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",44,null],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",44,null],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",44,null],[11,"project_point","","Projects a point.",44,null],[11,"project_vector","","Projects a vector.",44,null],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",44,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"encode","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",45,null],[11,"hash","","",45,null],[11,"fmt","","",45,null],[11,"new","","Normalize the given value and return it wrapped on a `Unit` structure.",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",45,{"inputs":[{"name":"t"},{"name":"normtype"}],"output":{"name":"option"}}],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",45,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",45,{"inputs":[{"name":"t"},{"name":"normtype"}],"output":{"name":"option"}}],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations\nmight cause a drift in the norm because of float inaccuracies.",45,null],[11,"from_unit_value_unchecked","","Wraps the given value, assuming it is already normalized.",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",45,null],[11,"as_ref","","",45,null],[11,"one","","",38,{"inputs":[],"output":{"name":"identity"}}],[11,"inverse","","",38,null],[11,"inverse_mut","","",38,null],[11,"mul","","",38,null],[11,"transpose","","",38,null],[11,"transpose_mut","","",38,null],[11,"translate","","",38,null],[11,"inverse_translate","","",38,null],[11,"rotate","","",38,null],[11,"inverse_rotate","","",38,null],[11,"absolute_rotate","","",38,null],[11,"transform","","",38,null],[11,"inverse_transform","","",38,null],[11,"inverse","","",5,null],[11,"inverse_mut","","",5,null],[11,"inverse","","",6,null],[11,"inverse_mut","","",6,null],[11,"inverse","","",7,null],[11,"inverse_mut","","",7,null],[11,"determinant","","",5,null],[11,"determinant","","",6,null],[11,"determinant","","",7,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",13,null],[11,"mul","","",12,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",19,null],[11,"mul","","",18,null],[11,"mul","","",6,null],[11,"mul_assign","","",7,null],[11,"mul_assign","","",6,null],[11,"mul_assign","","",13,null],[11,"mul_assign","","",12,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",18,null],[11,"angle_to","","",12,null],[11,"rotation_to","","",12,null],[11,"angle_to","","",13,null],[11,"rotation_to","","",13,null],[11,"cross","","",12,null],[11,"cross_matrix","","",12,null],[11,"cross","","",13,null],[11,"cross_matrix","","",13,null],[11,"nrows","","",12,null],[11,"row","","",12,null],[11,"set_row","","",12,null],[11,"canonical_basis","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",11,{"inputs":[{"name":"vector1"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",12,{"inputs":[{"name":"vector2"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vector3"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"sample","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"eq","","",24,null],[11,"encode","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",24,null],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",24,null],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",24,null],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",24,null],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",24,null],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",24,null],[11,"from_ordering","","Creates a `PartialOrdering` from an `Ordering`.",24,{"inputs":[{"name":"ordering"}],"output":{"name":"partialordering"}}],[11,"to_ordering","","Converts this `PartialOrdering` to an `Ordering`.",24,null],[6,"UnitQuaternion","","A unit quaternions. May be used to represent a rotation.",null,null],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",46,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",47,null],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",48,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",48,null],[10,"approx_ulps","","Default ULPs for approximation.",48,{"inputs":[],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",48,null],[11,"approx_eq","","Tests approximate equality.",48,null],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",49,null],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",50,{"inputs":[{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",50,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes&#39; constant.",51,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",51,{"inputs":[],"output":{"name":"self"}}],[10,"e","","Euler&#39;s number.",51,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",51,{"inputs":[],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",52,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",52,{"inputs":[],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",53,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Column","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",54,null],[10,"column","","Reads the `i`-th column of `self`.",54,null],[10,"set_column","","Writes the `i`-th column of `self`.",54,null],[8,"ColumnSlice","","Trait to access part of a column of a matrix",null,null],[10,"column_slice","","Returns a view to a slice of a column of a matrix.",55,null],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",56,null],[8,"Covariance","","Trait for computing the covariance of a set of data.",null,null],[10,"covariance","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",58,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",58,null],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",59,null],[8,"Determinant","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"determinant","","Returns the determinant of `m`.",60,null],[8,"Diagonal","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diagonal","","Creates a new matrix with the given diagonal.",61,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[10,"diagonal","","The diagonal of this matrix.",61,null],[8,"Dimension","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dimension","","The dimension of the object.",62,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",63,null],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",64,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPoint","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[8,"FloatVector","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",67,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",68,null],[10,"unsafe_at","","Reads the `i`-th element of `self`.",68,null],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",68,null],[8,"Inverse","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inverse","","Returns the inverse of `m`.",69,null],[10,"inverse_mut","","In-place version of `inverse`.",69,null],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",70,null],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",71,null],[8,"Matrix","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the mean of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",72,null],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[16,"NormType","","The scalar type for the norm (i.e. the undelying field).",73,null],[11,"norm","","Computes the norm of `self`.",73,null],[10,"norm_squared","","Computes the squared norm of `self`.",73,null],[10,"normalize","","Gets the normalized version of a copy of `v`.",73,null],[10,"normalize_mut","","Normalizes `self`.",73,null],[10,"try_normalize","","Gets the normalized version of a copy of `v` or `None` if the vector has a norm smaller\nor equal to `min_norm`. In particular, `.try_normalize(0.0)` returns `None` if the norm is\nexactly zero.",73,null],[10,"try_normalize_mut","","Normalized `v` or does nothing if the vector has a norm smaller\nor equal to `min_norm`.",73,null],[8,"NumPoint","","Trait grouping most common operations on points.",null,null],[8,"NumVector","","Trait grouping most common operations on vectors.",null,null],[8,"Origin","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"origin","","The trivial origin.",74,{"inputs":[],"output":{"name":"self"}}],[10,"is_origin","","Returns true if this points is exactly the trivial origin.",74,null],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",75,null],[10,"outer","","Computes the outer product: `a * b`",75,null],[8,"PartialOrder","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",76,null],[10,"sup","","Returns the supremum of this value and another",76,null],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",76,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null],[8,"PointAsVector","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[16,"Vector","","The vector type of the vector space associated to this point&#39;s affine space.",77,null],[10,"to_vector","","Converts this point to its associated vector.",77,null],[10,"as_vector","","Converts a reference to this point to a reference to its associated vector.",77,null],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",77,null],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",78,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",79,null],[10,"inverse_rotate","","Applies an inverse rotation to `v`.",79,null],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",80,null],[10,"inverse_rotation","","Gets the inverse rotation associated with `self`.",80,null],[10,"append_rotation_mut","","Appends a rotation to this object.",80,null],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",80,null],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",80,null],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",80,null],[10,"set_rotation","","Sets the rotation of `self`.",80,null],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",81,null],[10,"to_rotation_matrix","","Gets the rotation matrix represented by `self`.",81,null],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",83,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",83,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",83,null],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",83,null],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",84,null],[10,"row","","Reads the `i`-th row of `self`.",84,null],[10,"set_row","","Writes the `i`-th row of `self`.",84,null],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",85,null],[8,"SquareMatrix","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",86,null],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",87,null],[10,"inverse_transform","","Applies an inverse transformation to `v`.",87,null],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",88,null],[10,"inverse_transformation","","Gets the inverse transformation of `self`.",88,null],[10,"append_transformation_mut","","Appends a transformation to this object.",88,null],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",88,null],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",88,null],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",88,null],[10,"set_transformation","","Sets the transformation of `self`.",88,null],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",89,null],[10,"inverse_translate","","Apply an inverse translation to an object.",89,null],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",90,null],[10,"inverse_translation","","Gets the inverse translation associated with this object.",90,null],[10,"append_translation_mut","","Appends a translation to this object.",90,null],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",90,null],[10,"prepend_translation_mut","","Prepends a translation to this object.",90,null],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",90,null],[10,"set_translation","","Sets the translation.",90,null],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",91,null],[10,"transpose_mut","","In-place version of `transposed`.",91,null],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",92,{"inputs":[{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[11,"quaternion","","The underlying quaternion.",93,null],[11,"from_axisangle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle\n(the rotation angle).",93,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"from_scaled_axis","","Same as `::from_axisangle` with the axis multiplied with the angle.",93,{"inputs":[{"name":"vector3"}],"output":{"name":"unitquaternion"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",93,{"inputs":[{"name":"quaternion"}],"output":{"name":"unitquaternion"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",93,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"angle","","The rotation angle of this unit quaternion.",93,null],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",93,null],[11,"to_rotation_matrix","","Builds a rotation matrix from this quaternion.",93,null],[11,"one","","",93,{"inputs":[],"output":{"name":"unitquaternion"}}],[11,"inverse","","",93,null],[11,"inverse_mut","","",93,null],[11,"rand","","",93,{"inputs":[{"name":"r"}],"output":{"name":"unitquaternion"}}],[11,"approx_epsilon","","",93,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",93,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",93,null],[11,"approx_eq_ulps","","",93,null],[11,"div","","",93,null],[11,"div_assign","","",93,null],[11,"mul","","",93,null],[11,"mul_assign","","",93,null],[11,"mul","","",93,null],[11,"mul","","",93,null],[11,"rotation","","",93,null],[11,"inverse_rotation","","",93,null],[11,"append_rotation_mut","","",93,null],[11,"append_rotation","","",93,null],[11,"prepend_rotation_mut","","",93,null],[11,"prepend_rotation","","",93,null],[11,"set_rotation","","",93,null],[11,"to_rotation_matrix","","",93,null],[11,"rotate","","",93,null],[11,"inverse_rotate","","",93,null],[11,"rotate","","",93,null],[11,"inverse_rotate","","",93,null],[11,"angle_to","","",93,null],[11,"rotation_to","","",93,null],[11,"transform","","",93,null],[11,"inverse_transform","","",93,null],[11,"transform","","",93,null],[11,"inverse_transform","","",93,null],[11,"fmt","","",93,null],[11,"dimension","","",93,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"exp","","Compute the exponential of a quaternion.",93,null],[11,"ln","","Compute the natural logarithm of a quaternion.",93,null],[11,"powf","","Raise this unit quaternion to a given floating power.",93,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[11,"norm","","Computes the norm of `self`.",73,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null],[11,"approx_eq","","Tests approximate equality.",48,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"norm","","Computes the norm of `self`.",73,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[11,"approx_eq","","Tests approximate equality.",48,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null]],"paths":[[3,"DVector"],[3,"Isometry2"],[3,"Isometry3"],[3,"Similarity2"],[3,"Similarity3"],[3,"Matrix1"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Matrix5"],[3,"Matrix6"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Vector5"],[3,"Vector6"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Point4"],[3,"Point5"],[3,"Point6"],[3,"Quaternion"],[4,"PartialOrdering"],[3,"DMatrix"],[3,"DMatrix1"],[3,"DVector1"],[3,"DMatrix2"],[3,"DVector2"],[3,"DMatrix3"],[3,"DVector3"],[3,"DMatrix4"],[3,"DVector4"],[3,"DMatrix5"],[3,"DVector5"],[3,"DMatrix6"],[3,"DVector6"],[3,"Identity"],[3,"Rotation2"],[3,"Rotation3"],[3,"Perspective3"],[3,"PerspectiveMatrix3"],[3,"Orthographic3"],[3,"OrthographicMatrix3"],[3,"Unit"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Column"],[8,"ColumnSlice"],[8,"RowSlice"],[8,"Covariance"],[8,"Cross"],[8,"CrossMatrix"],[8,"Determinant"],[8,"Diagonal"],[8,"Dimension"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPoint"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inverse"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Origin"],[8,"Outer"],[8,"PartialOrder"],[8,"PointAsVector"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"],[6,"UnitQuaternion"]]};
searchIndex["clippy"] = {"doc":"","items":[[5,"plugin_registrar","clippy","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["clippy_lints"] = {"doc":"","items":[[5,"register_plugins","clippy_lints","",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"consts","","",null,null],[4,"FloatWidth","clippy_lints::consts","",null,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"Any","","",0,null],[4,"Constant","","A `LitKind`-like enum to fold constant `Expr`s into.",null,null],[13,"Str","","a String &quot;abc&quot;",1,null],[13,"Binary","","a Binary String b&quot;abc&quot;",1,null],[13,"Char","","a single char &#39;a&#39;",1,null],[13,"Int","","an integer, third argument is whether the value is negated",1,null],[13,"Float","","a float with given type",1,null],[13,"Bool","","true or false",1,null],[13,"Vec","","an array of constants",1,null],[13,"Repeat","","also an array, but with only one constant, repeated N times",1,null],[13,"Tuple","","a tuple of constants",1,null],[5,"lit_to_constant","","parse a `LitKind` to a `Constant`",null,{"inputs":[{"name":"litkind"}],"output":{"name":"constant"}}],[5,"constant","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"constant_simple","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"from","","",0,{"inputs":[{"name":"floatty"}],"output":{"name":"floatwidth"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"as_float","","convert this constant to a f64, if possible",1,null],[11,"eq","","",1,null],[11,"hash","","",1,null],[11,"partial_cmp","","",1,null],[0,"utils","clippy_lints","",null,null],[3,"SpanlessEq","clippy_lints::utils","Type used to check whether two ast are the same. This is different from the operator\n`==` on ast types as this operator would compare true equality with ID and span.",null,null],[3,"SpanlessHash","","Type used to hash an ast element. This is different from the `Hash` trait on ast types as this\ntrait would consider IDs and spans.",null,null],[3,"DiagnosticWrapper","","",null,null],[12,"0","","",2,null],[3,"LimitStack","","",null,null],[5,"differing_macro_contexts","","Returns true if the two spans come from differing expansions (i.e. one is from a macro and one\nisn&#39;t).",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_macro","","Returns true if this `expn_info` was expanded by any macro.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_external_macro","","Returns true if the macro that expanded the crate was outside of the current crate or was a\ncompiler plugin.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"match_def_path","","Check if a `DefId`&#39;s path matches the given absolute type path usage.",null,null],[5,"match_type","","Check if type is struct, enum or union type with given def path.",null,null],[5,"match_impl_method","","Check if the method call given in `expr` belongs to given type.",null,null],[5,"match_trait_method","","Check if the method call given in `expr` belongs to given trait.",null,null],[5,"match_path","","Match a `Path` against a slice of segment string literals.",null,null],[5,"match_path_ast","","Match a `Path` against a slice of segment string literals, e.g.",null,null],[5,"path_to_def","","Get the definition associated to a path.\nTODO: investigate if there is something more efficient for that.",null,null],[5,"get_trait_def_id","","Convenience function to get the `DefId` of a trait by path.",null,null],[5,"implements_trait","","Check whether a type implements a trait.\nSee also `get_trait_def_id`.",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"defid"},{"name":"vec"}],"output":{"name":"bool"}}],[5,"method_chain_args","","Match an `Expr` against a chain of methods, and return the matched `Expr`s.",null,null],[5,"get_item_name","","Get the name of the item the expression is in, if available.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"snippet","","Convert a span to a code snippet if available, otherwise use default.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"snippet_opt","","Convert a span to a code snippet. Returns `None` if not available.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"option"}}],[5,"snippet_block","","Convert a span (from a block) to a code snippet if available, otherwise use default.\nThis trims the code of indentation, except for the first line. Use it for blocks or block-like\nthings which need to be printed as such.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"expr_block","","Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\nAlso takes an `Option&lt;String&gt;` which can be put inside the braces.",null,{"inputs":[{"name":"t"},{"name":"expr"},{"name":"option"},{"name":"str"}],"output":{"name":"cow"}}],[5,"trim_multiline","","Trim indentation from a multiline string with possibility of ignoring the first line.",null,{"inputs":[{"name":"cow"},{"name":"bool"}],"output":{"name":"cow"}}],[5,"get_parent_expr","","Get a parent expressions if any – this is useful to constrain a lint.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"get_enclosing_block","","",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"option"}}],[5,"span_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":null}],[5,"span_help_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[5,"span_note_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[5,"span_lint_and_then","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"f"}],"output":null}],[5,"multispan_sugg","","Create a suggestion made from several `span → replacement`.",null,null],[5,"walk_ptrs_ty","","Return the base type for references and raw pointers.",null,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[5,"walk_ptrs_ty_depth","","Return the base type for references and raw pointers, and count reference depth.",null,null],[5,"is_integer_literal","","Check whether the given expression is a constant literal of the given value.",null,{"inputs":[{"name":"expr"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"is_adjusted","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"bool"}}],[5,"is_expn_of","","Return the pre-expansion span if is this comes from an expansion of the macro `name`.\nSee also `is_direct_expn_of`.",null,{"inputs":[{"name":"latecontext"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[5,"is_direct_expn_of","","Return the pre-expansion span if is this directly comes from an expansion of the macro `name`.\nThe difference with `is_expn_of` is that in\n```rust,ignore\nfoo!(bar!(42));\n```\n`42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n`is_direct_expn_of`.",null,{"inputs":[{"name":"latecontext"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[5,"camel_case_until","","Return the index of the character after the first camel-case component of `s`.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"camel_case_from","","Return index of the last camel-case component of `s`.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"return_ty","","Convenience function to get the return type of a function",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"ty"}}],[5,"same_tys","","Check if two types are the same.",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"bool"}}],[5,"type_is_unsafe_function","","Return whether the given type is an `unsafe` function.",null,{"inputs":[{"name":"ty"}],"output":{"name":"bool"}}],[5,"is_copy","","",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"bool"}}],[0,"cargo","","",null,null],[3,"Metadata","clippy_lints::utils::cargo","",null,null],[12,"packages","","",3,null],[12,"version","","",3,null],[3,"Package","","",null,null],[12,"name","","",4,null],[12,"version","","",4,null],[12,"dependencies","","",4,null],[12,"targets","","",4,null],[3,"Dependency","","",null,null],[12,"name","","",5,null],[12,"req","","",5,null],[3,"Target","","",null,null],[12,"name","","",6,null],[12,"kind","","",6,null],[4,"Error","","",null,null],[13,"Io","","",7,null],[13,"Utf8","","",7,null],[13,"Json","","",7,null],[5,"metadata","","",null,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",6,null],[11,"fmt","","",7,null],[11,"from","","",7,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"decodererror"}],"output":{"name":"self"}}],[0,"comparisons","clippy_lints::utils","Utility functions about comparison operators.",null,null],[4,"Rel","clippy_lints::utils::comparisons","Represent a normalized comparison operator.",null,null],[13,"Lt","","`&lt;`",8,null],[13,"Le","","`&lt;=`",8,null],[13,"Eq","","`==`",8,null],[13,"Ne","","`!=`",8,null],[5,"normalize_comparison","","Put the expression in the form  `lhs &lt; rhs`, `lhs &lt;= rhs`, `lhs == rhs` or `lhs != rhs`.",null,{"inputs":[{"name":"binop_"},{"name":"expr"},{"name":"expr"}],"output":{"name":"option"}}],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[0,"conf","clippy_lints::utils","Read configurations files.",null,null],[3,"Conf","clippy_lints::utils::conf","Type used to store lint configuration.",null,null],[12,"blacklisted_names","","Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about",9,null],[12,"cyclomatic_complexity_threshold","","Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have",9,null],[12,"doc_valid_idents","","Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks",9,null],[12,"too_many_arguments_threshold","","Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have",9,null],[12,"type_complexity_threshold","","Lint: TYPE_COMPLEXITY. The maximum complexity a type can have",9,null],[12,"max_single_char_names","","Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have",9,null],[12,"too_large_for_stack","","Lint: BOXED_LOCAL. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap",9,null],[12,"enum_variant_name_threshold","","Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger",9,null],[4,"Error","","Error from reading a configuration file.",null,null],[13,"Io","","An I/O error.",10,null],[13,"Toml","","The file is not valid TOML.",10,null],[13,"Type","","Type error.",10,null],[13,"UnknownKey","","There is an unknown key is the file.",10,null],[5,"file","","Get the configuration file from arguments.",null,null],[5,"read","","Read the `toml` configuration file. The function will ignore “File not found” errors iif\n`!must_exist`, in which case, it will return the default configuration.\nIn case of error, the function tries to continue as much as possible.",null,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"conf"}}],[0,"constants","clippy_lints::utils","This module contains some useful constants.",null,null],[17,"BUILTIN_TYPES","clippy_lints::utils::constants","List of the built-in types names.",null,null],[11,"new","clippy_lints::utils","",11,{"inputs":[{"name":"latecontext"}],"output":{"name":"self"}}],[11,"ignore_fn","","",11,null],[11,"eq_stmt","","Check whether two statements are the same.",11,null],[11,"eq_block","","Check whether two blocks are the same.",11,null],[11,"eq_expr","","",11,null],[11,"eq_pat","","Check whether two patterns are the same.",11,null],[11,"new","","",12,{"inputs":[{"name":"latecontext"}],"output":{"name":"self"}}],[11,"finish","","",12,null],[11,"hash_block","","",12,null],[11,"hash_expr","","",12,null],[11,"hash_exprs","","",12,null],[11,"hash_name","","",12,null],[11,"hash_path","","",12,null],[11,"hash_stmt","","",12,null],[0,"paths","","This module contains paths to types and functions Clippy needs to know about.",null,null],[17,"BEGIN_PANIC","clippy_lints::utils::paths","",null,null],[17,"BINARY_HEAP","","",null,null],[17,"BOX","","",null,null],[17,"BOX_NEW","","",null,null],[17,"BTREEMAP","","",null,null],[17,"BTREEMAP_ENTRY","","",null,null],[17,"BTREESET","","",null,null],[17,"CLONE","","",null,null],[17,"CLONE_TRAIT","","",null,null],[17,"CMP_MAX","","",null,null],[17,"CMP_MIN","","",null,null],[17,"COW","","",null,null],[17,"CSTRING_NEW","","",null,null],[17,"DEBUG_FMT_METHOD","","",null,null],[17,"DEFAULT_TRAIT","","",null,null],[17,"DISPLAY_FMT_METHOD","","",null,null],[17,"DROP","","",null,null],[17,"FMT_ARGUMENTS_NEWV1","","",null,null],[17,"FMT_ARGUMENTV1_NEW","","",null,null],[17,"HASH","","",null,null],[17,"HASHMAP","","",null,null],[17,"HASHMAP_ENTRY","","",null,null],[17,"HASHSET","","",null,null],[17,"IO_PRINT","","",null,null],[17,"ITERATOR","","",null,null],[17,"LINKED_LIST","","",null,null],[17,"LINT","","",null,null],[17,"LINT_ARRAY","","",null,null],[17,"MEM_FORGET","","",null,null],[17,"MUTEX","","",null,null],[17,"OPEN_OPTIONS","","",null,null],[17,"OPS_MODULE","","",null,null],[17,"OPTION","","",null,null],[17,"PTR_NULL","","",null,null],[17,"PTR_NULL_MUT","","",null,null],[17,"RANGE","","",null,null],[17,"RANGE_FROM","","",null,null],[17,"RANGE_FROM_STD","","",null,null],[17,"RANGE_FULL","","",null,null],[17,"RANGE_FULL_STD","","",null,null],[17,"RANGE_INCLUSIVE","","",null,null],[17,"RANGE_INCLUSIVE_NON_EMPTY","","",null,null],[17,"RANGE_INCLUSIVE_NON_EMPTY_STD","","",null,null],[17,"RANGE_INCLUSIVE_STD","","",null,null],[17,"RANGE_STD","","",null,null],[17,"RANGE_TO","","",null,null],[17,"RANGE_TO_INCLUSIVE","","",null,null],[17,"RANGE_TO_INCLUSIVE_STD","","",null,null],[17,"RANGE_TO_STD","","",null,null],[17,"REGEX","","",null,null],[17,"REGEX_BUILDER_NEW","","",null,null],[17,"REGEX_BYTES","","",null,null],[17,"REGEX_BYTES_BUILDER_NEW","","",null,null],[17,"REGEX_BYTES_NEW","","",null,null],[17,"REGEX_BYTES_SET_NEW","","",null,null],[17,"REGEX_NEW","","",null,null],[17,"REGEX_SET_NEW","","",null,null],[17,"RESULT","","",null,null],[17,"SERDE_DE_VISITOR","","",null,null],[17,"STRING","","",null,null],[17,"TRANSMUTE","","",null,null],[17,"VEC","","",null,null],[17,"VEC_DEQUE","","",null,null],[17,"VEC_FROM_ELEM","","",null,null],[0,"sugg","clippy_lints::utils","Contains utility functions to generate suggestions.",null,null],[4,"Sugg","clippy_lints::utils::sugg","A helper type to build suggestion correctly handling parenthesis.",null,null],[13,"NonParen","","An expression that never needs parenthesis such as `1337` or `[0; 42]`.",13,null],[13,"MaybeParen","","An expression that does not fit in other variants.",13,null],[13,"BinOp","","A binary operator expression, including `as`-casts and explicit type coercion.",13,null],[5,"make_unop","","Build the string for `&lt;op&gt;&lt;expr&gt;` adding parenthesis when necessary.",null,{"inputs":[{"name":"str"},{"name":"sugg"}],"output":{"name":"sugg"}}],[5,"make_assoc","","Build the string for `&lt;lhs&gt; &lt;op&gt; &lt;rhs&gt;` adding parenthesis when necessary.",null,{"inputs":[{"name":"assocop"},{"name":"sugg"},{"name":"sugg"}],"output":{"name":"sugg"}}],[5,"make_binop","","Convinience wrapper arround `make_assoc` and `AssocOp::from_ast_binop`.",null,{"inputs":[{"name":"binopkind"},{"name":"sugg"},{"name":"sugg"}],"output":{"name":"sugg"}}],[17,"ONE","","Literal constant `1`, for convenience.",null,null],[8,"DiagnosticBuilderExt","","Convenience extension trait for `DiagnosticBuilder`.",null,null],[10,"suggest_item_with_attr","","Suggests to add an attribute to an item.",14,null],[10,"suggest_prepend_item","","Suggest to add an item before another.",14,null],[11,"fmt","","",13,null],[11,"hir_opt","","Prepare a suggestion from an expression.",13,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[11,"hir","","Convenience function around `hir_opt` for suggestions with a default text.",13,{"inputs":[{"name":"latecontext"},{"name":"expr"},{"name":"str"}],"output":{"name":"sugg"}}],[11,"ast","","Prepare a suggestion from an expression.",13,{"inputs":[{"name":"earlycontext"},{"name":"expr"},{"name":"str"}],"output":{"name":"sugg"}}],[11,"and","","Convenience method to create the `&lt;lhs&gt; &amp;&amp; &lt;rhs&gt;` suggestion.",13,null],[11,"as_ty","","Convenience method to create the `&lt;lhs&gt; as &lt;rhs&gt;` suggestion.",13,null],[11,"addr","","Convenience method to create the `&amp;&lt;expr&gt;` suggestion.",13,null],[11,"mut_addr","","Convenience method to create the `&amp;mut &lt;expr&gt;` suggestion.",13,null],[11,"deref","","Convenience method to create the `*&lt;expr&gt;` suggestion.",13,null],[11,"range","","Convenience method to create the `&lt;lhs&gt;..&lt;rhs&gt;` or `&lt;lhs&gt;...&lt;rhs&gt;` suggestion.",13,null],[11,"maybe_par","","Add parenthesis to any expression that might need them. Suitable to the `self` argument of\na method call (eg. to build `bar.foo()` or `(1 + 2).foo()`).",13,null],[11,"add","","",13,null],[11,"sub","","",13,null],[11,"not","","",13,null],[0,"internal_lints","clippy_lints::utils","",null,null],[3,"Clippy","clippy_lints::utils::internal_lints","",null,null],[3,"LintWithoutLintPass","","",null,null],[7,"CLIPPY_LINTS_INTERNAL","","",null,null],[7,"LINT_WITHOUT_LINT_PASS","","",null,null],[11,"clone","","",15,null],[11,"get_lints","","",15,null],[11,"check_crate","","",15,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"lintwithoutlintpass"}}],[11,"get_lints","","",16,null],[11,"check_item","","",16,null],[11,"check_crate_post","","",16,null],[0,"higher","clippy_lints::utils","This module contains functions for retrieve the original AST from lowered `hir`.",null,null],[3,"Range","clippy_lints::utils::higher","Represent a range akin to `ast::ExprKind::Range`.",null,null],[12,"start","","The lower bound of the range, or `None` for ranges such as `..X`.",17,null],[12,"end","","The upper bound of the range, or `None` for ranges such as `X..`.",17,null],[12,"limits","","Whether the interval is open or closed.",17,null],[4,"VecArgs","","Represent the pre-expansion arguments of a `vec!` invocation.",null,null],[13,"Repeat","","`vec![elem; len]`",18,null],[13,"Vec","","`vec![a, b, c]`",18,null],[5,"binop","","Convert a hir binary operator to the corresponding `ast` type.",null,{"inputs":[{"name":"binop_"}],"output":{"name":"binopkind"}}],[5,"range","","Higher a `hir` range to something similar to `ast::ExprKind::Range`.",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[5,"is_from_for_desugar","","Checks if a `let` decl is from a `for` loop desugaring.",null,{"inputs":[{"name":"decl"}],"output":{"name":"bool"}}],[5,"for_loop","","Recover the essential nodes of a desugared for loop:\n`for pat in arg { body }` becomes `(pat, arg, body)`.",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[5,"vec_macro","","Returns the arguments of the `vec!` macro if this expression was expanded from `vec!`.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[11,"fmt","","",17,null],[11,"clone","","",17,null],[6,"MethodArgs","clippy_lints::utils","",null,null],[11,"drop","","",2,null],[11,"drop","","",19,null],[11,"new","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"limitstack"}}],[11,"limit","","",19,null],[11,"push_attrs","","",19,null],[11,"pop_attrs","","",19,null],[0,"approx_const","clippy_lints","",null,null],[3,"Pass","clippy_lints::approx_const","",null,null],[7,"APPROX_CONSTANT","","",null,null],[11,"clone","","",20,null],[11,"get_lints","","",20,null],[11,"check_expr","","",20,null],[0,"arithmetic","clippy_lints","",null,null],[3,"Arithmetic","clippy_lints::arithmetic","",null,null],[7,"INTEGER_ARITHMETIC","","",null,null],[7,"FLOAT_ARITHMETIC","","",null,null],[11,"clone","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"arithmetic"}}],[11,"get_lints","","",21,null],[11,"check_expr","","",21,null],[11,"check_expr_post","","",21,null],[0,"array_indexing","clippy_lints","",null,null],[3,"ArrayIndexing","clippy_lints::array_indexing","",null,null],[7,"OUT_OF_BOUNDS_INDEXING","","",null,null],[7,"INDEXING_SLICING","","",null,null],[11,"clone","","",22,null],[11,"get_lints","","",22,null],[11,"check_expr","","",22,null],[0,"assign_ops","clippy_lints","",null,null],[3,"AssignOps","clippy_lints::assign_ops","",null,null],[7,"ASSIGN_OPS","","",null,null],[7,"ASSIGN_OP_PATTERN","","",null,null],[7,"MISREFACTORED_ASSIGN_OP","","",null,null],[11,"clone","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"assignops"}}],[11,"get_lints","","",23,null],[11,"check_expr","","",23,null],[0,"attrs","clippy_lints","checks for attributes",null,null],[3,"AttrPass","clippy_lints::attrs","",null,null],[7,"INLINE_ALWAYS","","",null,null],[7,"USELESS_ATTRIBUTE","","",null,null],[7,"DEPRECATED_SEMVER","","",null,null],[11,"clone","","",24,null],[11,"get_lints","","",24,null],[11,"check_attribute","","",24,null],[11,"check_item","","",24,null],[11,"check_impl_item","","",24,null],[11,"check_trait_item","","",24,null],[0,"bit_mask","clippy_lints","",null,null],[3,"BitMask","clippy_lints::bit_mask","",null,null],[7,"BAD_BIT_MASK","","",null,null],[7,"INEFFECTIVE_BIT_MASK","","",null,null],[11,"clone","","",25,null],[11,"get_lints","","",25,null],[11,"check_expr","","",25,null],[0,"blacklisted_name","clippy_lints","",null,null],[3,"BlackListedName","clippy_lints::blacklisted_name","",null,null],[7,"BLACKLISTED_NAME","","",null,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"new","","",26,{"inputs":[{"name":"vec"}],"output":{"name":"blacklistedname"}}],[11,"get_lints","","",26,null],[11,"check_pat","","",26,null],[0,"block_in_if_condition","clippy_lints","",null,null],[3,"BlockInIfCondition","clippy_lints::block_in_if_condition","",null,null],[7,"BLOCK_IN_IF_CONDITION_EXPR","","",null,null],[7,"BLOCK_IN_IF_CONDITION_STMT","","",null,null],[11,"clone","","",27,null],[11,"get_lints","","",27,null],[11,"check_expr","","",27,null],[0,"booleans","clippy_lints","",null,null],[3,"NonminimalBool","clippy_lints::booleans","",null,null],[7,"NONMINIMAL_BOOL","","",null,null],[7,"LOGIC_BUG","","",null,null],[11,"clone","","",28,null],[11,"get_lints","","",28,null],[11,"check_item","","",28,null],[0,"collapsible_if","clippy_lints","Checks for if expressions that contain only an if expression.",null,null],[3,"CollapsibleIf","clippy_lints::collapsible_if","",null,null],[7,"COLLAPSIBLE_IF","","",null,null],[11,"clone","","",29,null],[11,"get_lints","","",29,null],[11,"check_expr","","",29,null],[0,"copies","clippy_lints","",null,null],[3,"CopyAndPaste","clippy_lints::copies","",null,null],[7,"IFS_SAME_COND","","",null,null],[7,"IF_SAME_THEN_ELSE","","",null,null],[7,"MATCH_SAME_ARMS","","",null,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"get_lints","","",30,null],[11,"check_expr","","",30,null],[0,"cyclomatic_complexity","clippy_lints","calculate cyclomatic complexity and warn about overly complex functions",null,null],[3,"CyclomaticComplexity","clippy_lints::cyclomatic_complexity","",null,null],[7,"CYCLOMATIC_COMPLEXITY","","",null,null],[11,"new","","",31,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_lints","","",31,null],[11,"check_item","","",31,null],[11,"check_impl_item","","",31,null],[11,"check_trait_item","","",31,null],[11,"enter_lint_attrs","","",31,null],[11,"exit_lint_attrs","","",31,null],[0,"derive","clippy_lints","",null,null],[3,"Derive","clippy_lints::derive","",null,null],[7,"DERIVE_HASH_XOR_EQ","","",null,null],[7,"EXPL_IMPL_CLONE_ON_COPY","","",null,null],[11,"get_lints","","",32,null],[11,"check_item","","",32,null],[0,"doc","clippy_lints","",null,null],[3,"Doc","clippy_lints::doc","",null,null],[5,"strip_doc_comment_decoration","","Cleanup documentation decoration (`///` and such).",null,null],[5,"check_attrs","","",null,null],[7,"DOC_MARKDOWN","","",null,null],[11,"clone","","",33,null],[11,"new","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"get_lints","","",33,null],[11,"check_crate","","",33,null],[11,"check_item","","",33,null],[0,"drop_ref","clippy_lints","",null,null],[3,"Pass","clippy_lints::drop_ref","",null,null],[7,"DROP_REF","","",null,null],[11,"get_lints","","",34,null],[11,"check_expr","","",34,null],[0,"entry","clippy_lints","",null,null],[3,"HashMapLint","clippy_lints::entry","",null,null],[7,"MAP_ENTRY","","",null,null],[11,"clone","","",35,null],[11,"get_lints","","",35,null],[11,"check_expr","","",35,null],[0,"enum_clike","clippy_lints","lint on C-like enums that are `repr(isize/usize)` and have values that don&#39;t fit into an `i32`",null,null],[3,"UnportableVariant","clippy_lints::enum_clike","",null,null],[7,"ENUM_CLIKE_UNPORTABLE_VARIANT","","",null,null],[11,"get_lints","","",36,null],[11,"check_item","","",36,null],[0,"enum_glob_use","clippy_lints","lint on `use`ing all variants of an enum",null,null],[3,"EnumGlobUse","clippy_lints::enum_glob_use","",null,null],[7,"ENUM_GLOB_USE","","",null,null],[11,"get_lints","","",37,null],[11,"check_mod","","",37,null],[0,"enum_variants","clippy_lints","lint on enum variants that are prefixed or suffixed by the same characters",null,null],[3,"EnumVariantNames","clippy_lints::enum_variants","",null,null],[7,"ENUM_VARIANT_NAMES","","",null,null],[7,"STUTTER","","",null,null],[11,"new","","",38,{"inputs":[{"name":"u64"}],"output":{"name":"enumvariantnames"}}],[11,"get_lints","","",38,null],[11,"check_item_post","","",38,null],[11,"check_item","","",38,null],[0,"eq_op","clippy_lints","",null,null],[3,"EqOp","clippy_lints::eq_op","",null,null],[7,"EQ_OP","","",null,null],[11,"clone","","",39,null],[11,"get_lints","","",39,null],[11,"check_expr","","",39,null],[0,"escape","clippy_lints","",null,null],[3,"Pass","clippy_lints::escape","",null,null],[12,"too_large_for_stack","","",40,null],[7,"BOXED_LOCAL","","",null,null],[11,"get_lints","","",40,null],[11,"check_fn","","",40,null],[0,"eta_reduction","clippy_lints","",null,null],[3,"EtaPass","clippy_lints::eta_reduction","",null,null],[7,"REDUNDANT_CLOSURE","","",null,null],[11,"get_lints","","",41,null],[11,"check_expr","","",41,null],[0,"eval_order_dependence","clippy_lints","",null,null],[3,"EvalOrderDependence","clippy_lints::eval_order_dependence","",null,null],[7,"EVAL_ORDER_DEPENDENCE","","",null,null],[11,"clone","","",42,null],[11,"get_lints","","",42,null],[11,"check_expr","","",42,null],[0,"format","clippy_lints","",null,null],[3,"Pass","clippy_lints::format","",null,null],[5,"get_argument_fmtstr_parts","","Returns the slice of format string parts in an `Arguments::new_v1` call.\nPublic because it&#39;s shared with a lint in print.rs.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[7,"USELESS_FORMAT","","",null,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"get_lints","","",43,null],[11,"check_expr","","",43,null],[0,"formatting","clippy_lints","",null,null],[3,"Formatting","clippy_lints::formatting","",null,null],[7,"SUSPICIOUS_ASSIGNMENT_FORMATTING","","",null,null],[7,"SUSPICIOUS_ELSE_FORMATTING","","",null,null],[11,"clone","","",44,null],[11,"get_lints","","",44,null],[11,"check_block","","",44,null],[11,"check_expr","","",44,null],[0,"functions","clippy_lints","",null,null],[3,"Functions","clippy_lints::functions","",null,null],[7,"TOO_MANY_ARGUMENTS","","",null,null],[7,"NOT_UNSAFE_PTR_ARG_DEREF","","",null,null],[11,"clone","","",45,null],[11,"new","","",45,{"inputs":[{"name":"u64"}],"output":{"name":"functions"}}],[11,"get_lints","","",45,null],[11,"check_fn","","",45,null],[11,"check_trait_item","","",45,null],[0,"identity_op","clippy_lints","",null,null],[3,"IdentityOp","clippy_lints::identity_op","",null,null],[7,"IDENTITY_OP","","",null,null],[11,"clone","","",46,null],[11,"get_lints","","",46,null],[11,"check_expr","","",46,null],[0,"if_not_else","clippy_lints","lint on if branches that could be swapped so no `!` operation is necessary on the condition",null,null],[3,"IfNotElse","clippy_lints::if_not_else","",null,null],[7,"IF_NOT_ELSE","","",null,null],[11,"get_lints","","",47,null],[11,"check_expr","","",47,null],[0,"items_after_statements","clippy_lints","lint when items are used after statements",null,null],[3,"ItemsAfterStatements","clippy_lints::items_after_statements","",null,null],[7,"ITEMS_AFTER_STATEMENTS","","",null,null],[11,"get_lints","","",48,null],[11,"check_block","","",48,null],[0,"len_zero","clippy_lints","",null,null],[3,"LenZero","clippy_lints::len_zero","",null,null],[7,"LEN_ZERO","","",null,null],[7,"LEN_WITHOUT_IS_EMPTY","","",null,null],[11,"clone","","",49,null],[11,"get_lints","","",49,null],[11,"check_item","","",49,null],[11,"check_expr","","",49,null],[0,"let_if_seq","clippy_lints","",null,null],[3,"LetIfSeq","clippy_lints::let_if_seq","",null,null],[7,"USELESS_LET_IF_SEQ","","",null,null],[11,"clone","","",50,null],[11,"get_lints","","",50,null],[11,"check_block","","",50,null],[0,"lifetimes","clippy_lints","",null,null],[3,"LifetimePass","clippy_lints::lifetimes","",null,null],[7,"NEEDLESS_LIFETIMES","","",null,null],[7,"UNUSED_LIFETIMES","","",null,null],[11,"clone","","",51,null],[11,"get_lints","","",51,null],[11,"check_item","","",51,null],[11,"check_impl_item","","",51,null],[11,"check_trait_item","","",51,null],[0,"loops","clippy_lints","",null,null],[3,"Pass","clippy_lints::loops","",null,null],[7,"NEEDLESS_RANGE_LOOP","","",null,null],[7,"EXPLICIT_ITER_LOOP","","",null,null],[7,"ITER_NEXT_LOOP","","",null,null],[7,"FOR_LOOP_OVER_OPTION","","",null,null],[7,"FOR_LOOP_OVER_RESULT","","",null,null],[7,"WHILE_LET_LOOP","","",null,null],[7,"UNUSED_COLLECT","","",null,null],[7,"REVERSE_RANGE_LOOP","","",null,null],[7,"EXPLICIT_COUNTER_LOOP","","",null,null],[7,"EMPTY_LOOP","","",null,null],[7,"WHILE_LET_ON_ITERATOR","","",null,null],[7,"FOR_KV_MAP","","",null,null],[11,"clone","","",52,null],[11,"get_lints","","",52,null],[11,"check_expr","","",52,null],[11,"check_stmt","","",52,null],[0,"map_clone","clippy_lints","",null,null],[3,"Pass","clippy_lints::map_clone","",null,null],[7,"MAP_CLONE","","",null,null],[11,"clone","","",53,null],[11,"check_expr","","",53,null],[11,"get_lints","","",53,null],[0,"matches","clippy_lints","",null,null],[3,"MatchPass","clippy_lints::matches","",null,null],[3,"SpannedRange","","",null,null],[12,"span","","",54,null],[12,"node","","",54,null],[5,"overlapping","","",null,null],[7,"SINGLE_MATCH","","",null,null],[7,"SINGLE_MATCH_ELSE","","",null,null],[7,"MATCH_REF_PATS","","",null,null],[7,"MATCH_BOOL","","",null,null],[7,"MATCH_OVERLAPPING_ARM","","",null,null],[11,"get_lints","","",55,null],[11,"check_expr","","",55,null],[11,"fmt","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[0,"mem_forget","clippy_lints","",null,null],[3,"MemForget","clippy_lints::mem_forget","",null,null],[7,"MEM_FORGET","","",null,null],[11,"get_lints","","",56,null],[11,"check_expr","","",56,null],[0,"methods","clippy_lints","",null,null],[3,"Pass","clippy_lints::methods","",null,null],[7,"OPTION_UNWRAP_USED","","",null,null],[7,"RESULT_UNWRAP_USED","","",null,null],[7,"SHOULD_IMPLEMENT_TRAIT","","",null,null],[7,"WRONG_SELF_CONVENTION","","",null,null],[7,"WRONG_PUB_SELF_CONVENTION","","",null,null],[7,"OK_EXPECT","","",null,null],[7,"OPTION_MAP_UNWRAP_OR","","",null,null],[7,"OPTION_MAP_UNWRAP_OR_ELSE","","",null,null],[7,"FILTER_NEXT","","",null,null],[7,"FILTER_MAP","","",null,null],[7,"SEARCH_IS_SOME","","",null,null],[7,"CHARS_NEXT_CMP","","",null,null],[7,"OR_FUN_CALL","","",null,null],[7,"EXTEND_FROM_SLICE","","",null,null],[7,"CLONE_ON_COPY","","",null,null],[7,"CLONE_DOUBLE_REF","","",null,null],[7,"NEW_RET_NO_SELF","","",null,null],[7,"SINGLE_CHAR_PATTERN","","",null,null],[7,"TEMPORARY_CSTRING_AS_PTR","","",null,null],[7,"ITER_NTH","","",null,null],[11,"clone","","",57,null],[11,"get_lints","","",57,null],[11,"check_expr","","",57,null],[11,"check_impl_item","","",57,null],[0,"minmax","clippy_lints","",null,null],[3,"MinMaxPass","clippy_lints::minmax","",null,null],[7,"MIN_MAX","","",null,null],[11,"get_lints","","",58,null],[11,"check_expr","","",58,null],[0,"misc","clippy_lints","",null,null],[3,"Pass","clippy_lints::misc","",null,null],[7,"TOPLEVEL_REF_ARG","","",null,null],[7,"CMP_NAN","","",null,null],[7,"FLOAT_CMP","","",null,null],[7,"CMP_OWNED","","",null,null],[7,"MODULO_ONE","","",null,null],[7,"REDUNDANT_PATTERN","","",null,null],[7,"USED_UNDERSCORE_BINDING","","",null,null],[11,"clone","","",59,null],[11,"get_lints","","",59,null],[11,"check_fn","","",59,null],[11,"check_stmt","","",59,null],[11,"check_expr","","",59,null],[11,"check_pat","","",59,null],[0,"misc_early","clippy_lints","",null,null],[3,"MiscEarly","clippy_lints::misc_early","",null,null],[7,"UNNEEDED_FIELD_PATTERN","","",null,null],[7,"DUPLICATE_UNDERSCORE_ARGUMENT","","",null,null],[7,"REDUNDANT_CLOSURE_CALL","","",null,null],[7,"DOUBLE_NEG","","",null,null],[7,"MIXED_CASE_HEX_LITERALS","","",null,null],[7,"UNSEPARATED_LITERAL_SUFFIX","","",null,null],[7,"ZERO_PREFIXED_LITERAL","","",null,null],[7,"BUILTIN_TYPE_SHADOW","","",null,null],[11,"clone","","",60,null],[11,"get_lints","","",60,null],[11,"check_generics","","",60,null],[11,"check_pat","","",60,null],[11,"check_fn","","",60,null],[11,"check_expr","","",60,null],[11,"check_block","","",60,null],[0,"missing_doc","clippy_lints","",null,null],[3,"MissingDoc","clippy_lints::missing_doc","",null,null],[7,"MISSING_DOCS_IN_PRIVATE_ITEMS","","",null,null],[11,"default","","",61,{"inputs":[],"output":{"name":"missingdoc"}}],[11,"new","","",61,{"inputs":[],"output":{"name":"missingdoc"}}],[11,"get_lints","","",61,null],[11,"enter_lint_attrs","","",61,null],[11,"exit_lint_attrs","","",61,null],[11,"check_crate","","",61,null],[11,"check_item","","",61,null],[11,"check_trait_item","","",61,null],[11,"check_impl_item","","",61,null],[11,"check_struct_field","","",61,null],[11,"check_variant","","",61,null],[0,"module_inception","clippy_lints","",null,null],[3,"Pass","clippy_lints::module_inception","",null,null],[7,"MODULE_INCEPTION","","",null,null],[11,"get_lints","","",62,null],[11,"check_item","","",62,null],[0,"mut_mut","clippy_lints","",null,null],[3,"MutMut","clippy_lints::mut_mut","",null,null],[3,"MutVisitor","","",null,null],[7,"MUT_MUT","","",null,null],[11,"clone","","",63,null],[11,"get_lints","","",63,null],[11,"check_block","","",63,null],[11,"check_ty","","",63,null],[11,"visit_expr","","",64,null],[11,"visit_ty","","",64,null],[0,"mut_reference","clippy_lints","",null,null],[3,"UnnecessaryMutPassed","clippy_lints::mut_reference","",null,null],[7,"UNNECESSARY_MUT_PASSED","","",null,null],[11,"clone","","",65,null],[11,"get_lints","","",65,null],[11,"check_expr","","",65,null],[0,"mutex_atomic","clippy_lints","Checks for uses of mutex where an atomic value could be used",null,null],[3,"MutexAtomic","clippy_lints::mutex_atomic","",null,null],[7,"MUTEX_ATOMIC","","",null,null],[7,"MUTEX_INTEGER","","",null,null],[11,"get_lints","","",66,null],[11,"check_expr","","",66,null],[0,"needless_bool","clippy_lints","Checks for needless boolean results of if-else expressions",null,null],[3,"NeedlessBool","clippy_lints::needless_bool","",null,null],[3,"BoolComparison","","",null,null],[7,"NEEDLESS_BOOL","","",null,null],[7,"BOOL_COMPARISON","","",null,null],[11,"clone","","",67,null],[11,"get_lints","","",67,null],[11,"check_expr","","",67,null],[11,"clone","","",68,null],[11,"get_lints","","",68,null],[11,"check_expr","","",68,null],[0,"needless_borrow","clippy_lints","Checks for needless address of operations (`&amp;`)",null,null],[3,"NeedlessBorrow","clippy_lints::needless_borrow","",null,null],[7,"NEEDLESS_BORROW","","",null,null],[11,"clone","","",69,null],[11,"get_lints","","",69,null],[11,"check_expr","","",69,null],[11,"check_pat","","",69,null],[0,"needless_update","clippy_lints","",null,null],[3,"Pass","clippy_lints::needless_update","",null,null],[7,"NEEDLESS_UPDATE","","",null,null],[11,"clone","","",70,null],[11,"get_lints","","",70,null],[11,"check_expr","","",70,null],[0,"neg_multiply","clippy_lints","",null,null],[3,"NegMultiply","clippy_lints::neg_multiply","",null,null],[7,"NEG_MULTIPLY","","",null,null],[11,"clone","","",71,null],[11,"get_lints","","",71,null],[11,"check_expr","","",71,null],[0,"new_without_default","clippy_lints","",null,null],[3,"NewWithoutDefault","clippy_lints::new_without_default","",null,null],[7,"NEW_WITHOUT_DEFAULT","","",null,null],[7,"NEW_WITHOUT_DEFAULT_DERIVE","","",null,null],[11,"clone","","",72,null],[11,"get_lints","","",72,null],[11,"check_fn","","",72,null],[0,"no_effect","clippy_lints","",null,null],[3,"Pass","clippy_lints::no_effect","",null,null],[7,"NO_EFFECT","","",null,null],[7,"UNNECESSARY_OPERATION","","",null,null],[11,"clone","","",73,null],[11,"get_lints","","",73,null],[11,"check_stmt","","",73,null],[0,"non_expressive_names","clippy_lints","",null,null],[3,"NonExpressiveNames","clippy_lints::non_expressive_names","",null,null],[12,"max_single_char_names","","",74,null],[7,"SIMILAR_NAMES","","",null,null],[7,"MANY_SINGLE_CHAR_NAMES","","",null,null],[11,"get_lints","","",74,null],[11,"check_item","","",74,null],[0,"open_options","clippy_lints","",null,null],[3,"NonSensical","clippy_lints::open_options","",null,null],[7,"NONSENSICAL_OPEN_OPTIONS","","",null,null],[11,"clone","","",75,null],[11,"get_lints","","",75,null],[11,"check_expr","","",75,null],[0,"overflow_check_conditional","clippy_lints","",null,null],[3,"OverflowCheckConditional","clippy_lints::overflow_check_conditional","",null,null],[7,"OVERFLOW_CHECK_CONDITIONAL","","",null,null],[11,"clone","","",76,null],[11,"get_lints","","",76,null],[11,"check_expr","","",76,null],[0,"panic","clippy_lints","",null,null],[3,"Pass","clippy_lints::panic","",null,null],[7,"PANIC_PARAMS","","",null,null],[11,"get_lints","","",77,null],[11,"check_expr","","",77,null],[0,"precedence","clippy_lints","",null,null],[3,"Precedence","clippy_lints::precedence","",null,null],[7,"PRECEDENCE","","",null,null],[11,"clone","","",78,null],[11,"get_lints","","",78,null],[11,"check_expr","","",78,null],[0,"print","clippy_lints","",null,null],[3,"Pass","clippy_lints::print","",null,null],[7,"PRINT_WITH_NEWLINE","","",null,null],[7,"PRINT_STDOUT","","",null,null],[7,"USE_DEBUG","","",null,null],[11,"clone","","",79,null],[11,"fmt","","",79,null],[11,"get_lints","","",79,null],[11,"check_expr","","",79,null],[0,"ptr","clippy_lints","Checks for usage of  `&amp;Vec[_]` and `&amp;String`.",null,null],[3,"PointerPass","clippy_lints::ptr","",null,null],[7,"PTR_ARG","","",null,null],[7,"CMP_NULL","","",null,null],[11,"clone","","",80,null],[11,"get_lints","","",80,null],[11,"check_item","","",80,null],[11,"check_impl_item","","",80,null],[11,"check_trait_item","","",80,null],[11,"check_expr","","",80,null],[0,"ranges","clippy_lints","",null,null],[3,"StepByZero","clippy_lints::ranges","",null,null],[7,"RANGE_STEP_BY_ZERO","","",null,null],[7,"RANGE_ZIP_WITH_LEN","","",null,null],[11,"clone","","",81,null],[11,"get_lints","","",81,null],[11,"check_expr","","",81,null],[0,"regex","clippy_lints","",null,null],[3,"Pass","clippy_lints::regex","",null,null],[7,"INVALID_REGEX","","",null,null],[7,"TRIVIAL_REGEX","","",null,null],[7,"REGEX_MACRO","","",null,null],[11,"clone","","",82,null],[11,"default","","",82,{"inputs":[],"output":{"name":"pass"}}],[11,"get_lints","","",82,null],[11,"check_crate","","",82,null],[11,"check_block","","",82,null],[11,"check_block_post","","",82,null],[11,"check_expr","","",82,null],[0,"returns","clippy_lints","",null,null],[3,"ReturnPass","clippy_lints::returns","",null,null],[7,"NEEDLESS_RETURN","","",null,null],[7,"LET_AND_RETURN","","",null,null],[11,"clone","","",83,null],[11,"get_lints","","",83,null],[11,"check_fn","","",83,null],[11,"check_block","","",83,null],[0,"serde","clippy_lints","",null,null],[3,"Serde","clippy_lints::serde","",null,null],[7,"SERDE_API_MISUSE","","",null,null],[11,"clone","","",84,null],[11,"get_lints","","",84,null],[11,"check_item","","",84,null],[0,"shadow","clippy_lints","",null,null],[3,"Pass","clippy_lints::shadow","",null,null],[7,"SHADOW_SAME","","",null,null],[7,"SHADOW_REUSE","","",null,null],[7,"SHADOW_UNRELATED","","",null,null],[11,"clone","","",85,null],[11,"get_lints","","",85,null],[11,"check_fn","","",85,null],[0,"strings","clippy_lints","",null,null],[3,"StringAdd","clippy_lints::strings","",null,null],[3,"StringLitAsBytes","","",null,null],[7,"STRING_ADD_ASSIGN","","",null,null],[7,"STRING_ADD","","",null,null],[7,"STRING_LIT_AS_BYTES","","",null,null],[11,"clone","","",86,null],[11,"get_lints","","",86,null],[11,"check_expr","","",86,null],[11,"clone","","",87,null],[11,"get_lints","","",87,null],[11,"check_expr","","",87,null],[0,"swap","clippy_lints","",null,null],[3,"Swap","clippy_lints::swap","",null,null],[7,"MANUAL_SWAP","","",null,null],[7,"ALMOST_SWAPPED","","",null,null],[11,"clone","","",88,null],[11,"get_lints","","",88,null],[11,"check_block","","",88,null],[0,"temporary_assignment","clippy_lints","",null,null],[3,"Pass","clippy_lints::temporary_assignment","",null,null],[7,"TEMPORARY_ASSIGNMENT","","",null,null],[11,"clone","","",89,null],[11,"get_lints","","",89,null],[11,"check_expr","","",89,null],[0,"transmute","clippy_lints","",null,null],[3,"Transmute","clippy_lints::transmute","",null,null],[7,"WRONG_TRANSMUTE","","",null,null],[7,"USELESS_TRANSMUTE","","",null,null],[7,"CROSSPOINTER_TRANSMUTE","","",null,null],[7,"TRANSMUTE_PTR_TO_REF","","",null,null],[11,"get_lints","","",90,null],[11,"check_expr","","",90,null],[0,"types","clippy_lints","",null,null],[3,"TypePass","clippy_lints::types","Handles all the linting of funky types",null,null],[3,"LetPass","","",null,null],[3,"UnitCmp","","",null,null],[3,"CastPass","","",null,null],[3,"TypeComplexityPass","","",null,null],[3,"CharLitAsU8","","",null,null],[3,"AbsurdExtremeComparisons","","",null,null],[3,"InvalidUpcastComparisons","","",null,null],[7,"BOX_VEC","","",null,null],[7,"LINKEDLIST","","",null,null],[7,"LET_UNIT_VALUE","","",null,null],[7,"UNIT_CMP","","",null,null],[7,"CAST_PRECISION_LOSS","","",null,null],[7,"CAST_SIGN_LOSS","","",null,null],[7,"CAST_POSSIBLE_TRUNCATION","","",null,null],[7,"CAST_POSSIBLE_WRAP","","",null,null],[7,"TYPE_COMPLEXITY","","",null,null],[7,"CHAR_LIT_AS_U8","","",null,null],[7,"ABSURD_EXTREME_COMPARISONS","","",null,null],[7,"INVALID_UPCAST_COMPARISONS","","",null,null],[11,"get_lints","","",91,null],[11,"check_ty","","",91,null],[11,"get_lints","","",92,null],[11,"check_decl","","",92,null],[11,"get_lints","","",93,null],[11,"check_expr","","",93,null],[11,"get_lints","","",94,null],[11,"check_expr","","",94,null],[11,"new","","",95,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_lints","","",95,null],[11,"check_fn","","",95,null],[11,"check_struct_field","","",95,null],[11,"check_item","","",95,null],[11,"check_trait_item","","",95,null],[11,"check_impl_item","","",95,null],[11,"check_local","","",95,null],[11,"get_lints","","",96,null],[11,"check_expr","","",96,null],[11,"get_lints","","",97,null],[11,"check_expr","","",97,null],[11,"get_lints","","",98,null],[11,"check_expr","","",98,null],[0,"unicode","clippy_lints","",null,null],[3,"Unicode","clippy_lints::unicode","",null,null],[7,"ZERO_WIDTH_SPACE","","",null,null],[7,"NON_ASCII_LITERAL","","",null,null],[7,"UNICODE_NOT_NFC","","",null,null],[11,"clone","","",99,null],[11,"get_lints","","",99,null],[11,"check_expr","","",99,null],[0,"unsafe_removed_from_name","clippy_lints","",null,null],[3,"UnsafeNameRemoval","clippy_lints::unsafe_removed_from_name","",null,null],[7,"UNSAFE_REMOVED_FROM_NAME","","",null,null],[11,"get_lints","","",100,null],[11,"check_item","","",100,null],[0,"unused_label","clippy_lints","",null,null],[3,"UnusedLabel","clippy_lints::unused_label","",null,null],[7,"UNUSED_LABEL","","",null,null],[11,"get_lints","","",101,null],[11,"check_fn","","",101,null],[0,"vec","clippy_lints","",null,null],[3,"Pass","clippy_lints::vec","",null,null],[7,"USELESS_VEC","","",null,null],[11,"clone","","",102,null],[11,"fmt","","",102,null],[11,"get_lints","","",102,null],[11,"check_expr","","",102,null],[0,"zero_div_zero","clippy_lints","",null,null],[3,"Pass","clippy_lints::zero_div_zero","",null,null],[7,"ZERO_DIVIDED_BY_ZERO","","",null,null],[11,"get_lints","","",103,null],[11,"check_expr","","",103,null],[14,"if_let_chain","clippy_lints","Produce a nested chain of if-lets and ifs from the patterns:",null,null]],"paths":[[4,"FloatWidth"],[4,"Constant"],[3,"DiagnosticWrapper"],[3,"Metadata"],[3,"Package"],[3,"Dependency"],[3,"Target"],[4,"Error"],[4,"Rel"],[3,"Conf"],[4,"Error"],[3,"SpanlessEq"],[3,"SpanlessHash"],[4,"Sugg"],[8,"DiagnosticBuilderExt"],[3,"Clippy"],[3,"LintWithoutLintPass"],[3,"Range"],[4,"VecArgs"],[3,"LimitStack"],[3,"Pass"],[3,"Arithmetic"],[3,"ArrayIndexing"],[3,"AssignOps"],[3,"AttrPass"],[3,"BitMask"],[3,"BlackListedName"],[3,"BlockInIfCondition"],[3,"NonminimalBool"],[3,"CollapsibleIf"],[3,"CopyAndPaste"],[3,"CyclomaticComplexity"],[3,"Derive"],[3,"Doc"],[3,"Pass"],[3,"HashMapLint"],[3,"UnportableVariant"],[3,"EnumGlobUse"],[3,"EnumVariantNames"],[3,"EqOp"],[3,"Pass"],[3,"EtaPass"],[3,"EvalOrderDependence"],[3,"Pass"],[3,"Formatting"],[3,"Functions"],[3,"IdentityOp"],[3,"IfNotElse"],[3,"ItemsAfterStatements"],[3,"LenZero"],[3,"LetIfSeq"],[3,"LifetimePass"],[3,"Pass"],[3,"Pass"],[3,"SpannedRange"],[3,"MatchPass"],[3,"MemForget"],[3,"Pass"],[3,"MinMaxPass"],[3,"Pass"],[3,"MiscEarly"],[3,"MissingDoc"],[3,"Pass"],[3,"MutMut"],[3,"MutVisitor"],[3,"UnnecessaryMutPassed"],[3,"MutexAtomic"],[3,"NeedlessBool"],[3,"BoolComparison"],[3,"NeedlessBorrow"],[3,"Pass"],[3,"NegMultiply"],[3,"NewWithoutDefault"],[3,"Pass"],[3,"NonExpressiveNames"],[3,"NonSensical"],[3,"OverflowCheckConditional"],[3,"Pass"],[3,"Precedence"],[3,"Pass"],[3,"PointerPass"],[3,"StepByZero"],[3,"Pass"],[3,"ReturnPass"],[3,"Serde"],[3,"Pass"],[3,"StringAdd"],[3,"StringLitAsBytes"],[3,"Swap"],[3,"Pass"],[3,"Transmute"],[3,"TypePass"],[3,"LetPass"],[3,"UnitCmp"],[3,"CastPass"],[3,"TypeComplexityPass"],[3,"CharLitAsU8"],[3,"AbsurdExtremeComparisons"],[3,"InvalidUpcastComparisons"],[3,"Unicode"],[3,"UnsafeNameRemoval"],[3,"UnusedLabel"],[3,"Pass"],[3,"Pass"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","",null,null],[6,"BigRational","","",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,null],[10,"mod_floor","","Floored integer modulo, satisfying:",1,null],[10,"gcd","","Greatest Common Divisor (GCD).",1,null],[10,"lcm","","Lowest Common Multiple (LCM).",1,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,null],[10,"is_even","","Returns `true` if the number is even.",1,null],[10,"is_odd","","Returns `true` if the number is odd.",1,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[11,"to_degrees","","Converts radians to degrees.",13,null],[11,"to_radians","","Converts degrees to radians.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",17,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",17,null],[11,"checked_add","","",17,null],[11,"checked_sub","","",17,null],[11,"checked_mul","","",17,null],[11,"checked_div","","",17,null],[11,"encode","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"hash","","",18,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",18,null],[11,"bitand","","",18,null],[11,"bitor","","",18,null],[11,"bitor","","",18,null],[11,"bitxor","","",18,null],[11,"bitxor","","",18,null],[11,"shl","","",18,null],[11,"shr","","",18,null],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,null],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",18,null],[11,"add","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"mul","","",18,null],[11,"mul","","",18,null],[11,"div","","",18,null],[11,"div","","",18,null],[11,"rem","","",18,null],[11,"rem","","",18,null],[11,"neg","","",18,null],[11,"checked_add","","",18,null],[11,"checked_sub","","",18,null],[11,"checked_mul","","",18,null],[11,"checked_div","","",18,null],[11,"div_rem","","",18,null],[11,"div_floor","","",18,null],[11,"mod_floor","","",18,null],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,null],[11,"to_i64","","",18,null],[11,"to_u64","","",18,null],[11,"to_f32","","",18,null],[11,"to_f64","","",18,null],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_biguint","","",18,null],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,null],[11,"encode","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"hash","","",17,null],[11,"eq","","",17,null],[11,"partial_cmp","","",17,null],[11,"cmp","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",17,null],[11,"shr","","",17,null],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,null],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",17,null],[11,"abs_sub","","",17,null],[11,"signum","","",17,null],[11,"is_positive","","",17,null],[11,"is_negative","","",17,null],[11,"add","","",17,null],[11,"add","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"mul","","",17,null],[11,"mul","","",17,null],[11,"div","","",17,null],[11,"div","","",17,null],[11,"rem","","",17,null],[11,"rem","","",17,null],[11,"neg","","",17,null],[11,"checked_add","","",17,null],[11,"checked_sub","","",17,null],[11,"checked_mul","","",17,null],[11,"checked_div","","",17,null],[11,"div_rem","","",17,null],[11,"div_floor","","",17,null],[11,"mod_floor","","",17,null],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,null],[11,"to_i64","","",17,null],[11,"to_u64","","",17,null],[11,"to_f32","","",17,null],[11,"to_f64","","",17,null],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"to_bigint","","",17,null],[11,"to_bigint","","",18,null],[11,"to_biguint","","",17,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,null],[11,"numer","","Gets an immutable reference to the numerator.",0,null],[11,"denom","","Gets an immutable reference to the denominator.",0,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,null],[11,"reduced","","Returns a reduced copy of self.",0,null],[11,"recip","","Returns the reciprocal.",0,null],[11,"floor","","Rounds towards minus infinity.",0,null],[11,"ceil","","Rounds towards plus infinity.",0,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,null],[11,"trunc","","Rounds towards zero.",0,null],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,null],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,null],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["rayon"] = {"doc":"","items":[[3,"Configuration","rayon","Contains the rayon thread pool configuration.",null,null],[3,"ThreadPool","","",null,null],[4,"InitError","","Custom error type for the rayon thread pool configuration.",null,null],[13,"NumberOfThreadsZero","","Error if number of threads is set to zero.",0,null],[13,"GlobalPoolAlreadyInitialized","","Error if the gloal thread pool is initialized multiple times\nand the configuration is not equal for all configurations.",0,null],[5,"dump_stats","","This is a debugging API not really intended for end users. It will\ndump some performance statistics out using `println`.",null,{"inputs":[],"output":null}],[5,"initialize","","Initializes the global thread pool. This initialization is\n**optional**.  If you do not call this function, the thread pool\nwill be automatically initialized with the default\nconfiguration. In fact, calling `initialize` is not recommended,\nexcept for in two scenarios:",null,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[5,"join","","",null,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",1,{"inputs":[],"output":{"name":"configuration"}}],[11,"num_threads","","Get the number of threads that will be used for the thread\npool. See `set_num_threads` for more information.",1,null],[11,"set_num_threads","","Set the number of threads to be used in the rayon threadpool.\nThe argument `num_threads` must not be zero. If you do not\ncall this function, rayon will select a suitable default\n(currently, the default is one thread per CPU core).",1,null],[11,"new","","Constructs a new thread pool with the given configuration. If\nthe configuration is not valid, returns a suitable `Err`\nresult.  See `InitError` for more details.",2,{"inputs":[{"name":"configuration"}],"output":{"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to `join`\nwhich occur there will then operate within that threadpool.",2,null],[11,"drop","","",2,null],[0,"par_iter","","The `ParallelIterator` module makes it easy to write parallel\nprograms using an iterator-style interface. To get access to all\nthe methods you want, the easiest is to write `use\nrayon::prelude::*;` at the top of your module, which will import\nthe various traits and methods you need.",null,null],[0,"chain","rayon::par_iter","",null,null],[3,"ChainIter","rayon::par_iter::chain","",null,null],[3,"ChainProducer","","",null,null],[11,"new","","",3,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"chainiter"}}],[11,"drive_unindexed","","",3,null],[11,"upper_bound","","",3,null],[11,"drive","","",3,null],[11,"len","","",3,null],[11,"with_producer","","",3,null],[11,"cost","","",4,null],[11,"split_at","","",4,null],[11,"into_iter","","",4,null],[0,"collect","rayon::par_iter","",null,null],[5,"collect_into","rayon::par_iter::collect","",null,{"inputs":[{"name":"par_iter"},{"name":"vec"}],"output":null}],[0,"enumerate","rayon::par_iter","",null,null],[3,"Enumerate","rayon::par_iter::enumerate","",null,null],[3,"EnumerateProducer","","",null,null],[11,"new","","",5,{"inputs":[{"name":"m"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",5,null],[11,"upper_bound","","",5,null],[11,"drive","","",5,null],[11,"len","","",5,null],[11,"with_producer","","",5,null],[11,"cost","","",6,null],[11,"split_at","","",6,null],[11,"into_iter","","",6,null],[0,"filter","rayon::par_iter","",null,null],[3,"Filter","rayon::par_iter::filter","",null,null],[11,"new","","",7,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filter"}}],[11,"drive_unindexed","","",7,null],[11,"upper_bound","","",7,null],[11,"drive","","",7,null],[0,"filter_map","rayon::par_iter","",null,null],[3,"FilterMap","rayon::par_iter::filter_map","",null,null],[11,"new","","",8,{"inputs":[{"name":"m"},{"name":"filter_op"}],"output":{"name":"filtermap"}}],[11,"drive_unindexed","","",8,null],[11,"upper_bound","","",8,null],[11,"drive","","",8,null],[0,"flat_map","rayon::par_iter","",null,null],[3,"FlatMap","rayon::par_iter::flat_map","",null,null],[11,"new","","",9,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"flatmap"}}],[11,"drive_unindexed","","",9,null],[0,"internal","rayon::par_iter","Internal traits and functions used to implement parallel\niteration. These should be considered highly unstable: users of\nparallel iterators should not need to interact with them directly.\nSee `README.md` for a high-level overview.",null,null],[3,"NoopReducer","rayon::par_iter::internal","Utility type for consumers that don&#39;t need a &quot;reduce&quot; step. Just\nreduces unit to unit.",null,null],[5,"bridge","","",null,{"inputs":[{"name":"par_iter"},{"name":"c"}],"output":{"name":"result"}}],[8,"ProducerCallback","","",null,null],[16,"Output","","",10,null],[10,"callback","","",10,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is\nnot queryable through the API; the consumer is expected to track\nit.",null,null],[10,"cost","","Cost to produce `len` items, where `len` must be `N`.",11,null],[10,"split_at","","Split into two producers; one produces items `0..index`, the\nother `index..N`. Index must be less than `N`.",11,null],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",12,null],[16,"Reducer","","",12,null],[16,"Result","","",12,null],[10,"cost","","If it costs `producer_cost` to produce the items we will\nconsume, returns cost adjusted to account for consuming them.",12,null],[10,"split_at","","Divide the consumer into two consumers, one processing items\n`0..index` and one processing items from `index..`. Also\nproduces a reducer that can be used to reduce the results at\nthe end.",12,null],[10,"into_folder","","Convert the consumer into a folder that can consume items\nsequentially, eventually producing a final result.",12,null],[8,"Folder","","",null,null],[16,"Result","","",13,null],[10,"consume","","Consume next item and return new sequential state.",13,null],[10,"complete","","Finish consuming items, produce final result.",13,null],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a\nsplit.",14,null],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off","","",15,null],[10,"to_reducer","","",15,null],[11,"reduce","","",16,null],[0,"len","rayon::par_iter","",null,null],[3,"ParallelLen","rayon::par_iter::len","",null,null],[12,"maximal_len","","Maximal number of elements that we will write",17,null],[12,"cost","","An estimate of the &quot;cost&quot; of this operation. This is a kind of\nabstract concept you can use to influence how fine-grained the\nthreads are.",17,null],[12,"sparse","","If true, all elements will be written. If false, some may not.\nFor example, `sparse` will be false if there is a filter.\nWhen doing a collect, sparse iterators require a compression\nstep.",17,null],[17,"THRESHOLD","","",null,null],[17,"FUNC_ADJUSTMENT","","",null,null],[11,"clone","","",17,null],[11,"left_cost","","",17,null],[11,"right_cost","","",17,null],[0,"for_each","rayon::par_iter","",null,null],[5,"for_each","rayon::par_iter::for_each","",null,{"inputs":[{"name":"par_iter"},{"name":"op"}],"output":null}],[0,"reduce","rayon::par_iter","",null,null],[3,"ReduceFolder","rayon::par_iter::reduce","",null,null],[3,"SumOp","","",null,null],[3,"MulOp","","",null,null],[3,"MinOp","","",null,null],[3,"MaxOp","","",null,null],[3,"ReduceWithOp","","",null,null],[3,"ReduceWithIdentityOp","","",null,null],[5,"reduce","","",null,{"inputs":[{"name":"par_iter"},{"name":"reduce_op"}],"output":{"name":"t"}}],[17,"SUM","","",null,null],[17,"MUL","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[8,"ReduceOp","","Specifies a &quot;reduce operator&quot;. This is the combination of a start\nvalue and a reduce function. The reduce function takes two items\nand computes a reduced version. The start value `S` is a kind of\n&quot;zero&quot; or &quot;identity&quot; value that may be intermingled as needed;\nideally, `reduce(S, X)` for any item `X` yields `X`.",null,null],[10,"start_value","","",18,null],[10,"reduce","","",18,null],[11,"consume","","",19,null],[11,"complete","","",19,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",20,null],[11,"reduce","","",20,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",21,null],[11,"reduce","","",21,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",22,null],[11,"reduce","","",22,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"start_value","","",23,null],[11,"reduce","","",23,null],[11,"new","","",24,{"inputs":[{"name":"op"}],"output":{"name":"reducewithop"}}],[11,"start_value","","",24,null],[11,"reduce","","",24,null],[11,"new","","",25,{"inputs":[{"name":"item"},{"name":"op"}],"output":{"name":"reducewithidentityop"}}],[11,"start_value","","",25,null],[11,"reduce","","",25,null],[0,"slice","rayon::par_iter","",null,null],[3,"SliceIter","rayon::par_iter::slice","",null,null],[3,"ChunksIter","","",null,null],[3,"SliceProducer","","",null,null],[3,"SliceChunksProducer","","",null,null],[11,"drive_unindexed","","",26,null],[11,"upper_bound","","",26,null],[11,"drive","","",26,null],[11,"len","","",26,null],[11,"with_producer","","",26,null],[11,"drive_unindexed","","",27,null],[11,"upper_bound","","",27,null],[11,"drive","","",27,null],[11,"len","","",27,null],[11,"with_producer","","",27,null],[11,"cost","","",28,null],[11,"split_at","","",28,null],[11,"into_iter","","",28,null],[11,"cost","","",29,null],[11,"split_at","","",29,null],[11,"into_iter","","",29,null],[0,"slice_mut","rayon::par_iter","",null,null],[3,"SliceIterMut","rayon::par_iter::slice_mut","",null,null],[3,"ChunksMutIter","","",null,null],[3,"SliceMutProducer","","",null,null],[3,"SliceChunksMutProducer","","",null,null],[11,"drive_unindexed","","",30,null],[11,"upper_bound","","",30,null],[11,"drive","","",30,null],[11,"len","","",30,null],[11,"with_producer","","",30,null],[11,"drive_unindexed","","",31,null],[11,"upper_bound","","",31,null],[11,"drive","","",31,null],[11,"len","","",31,null],[11,"with_producer","","",31,null],[11,"cost","","",32,null],[11,"split_at","","",32,null],[11,"into_iter","","",32,null],[11,"cost","","",33,null],[11,"split_at","","",33,null],[11,"into_iter","","",33,null],[0,"map","rayon::par_iter","",null,null],[3,"MapFn","rayon::par_iter::map","",null,null],[12,"0","","",34,null],[3,"MapCloned","","",null,null],[3,"MapInspect","","",null,null],[12,"0","","",35,null],[3,"Map","","",null,null],[3,"MapProducer","","",null,null],[3,"MapIter","","",null,null],[8,"MapOp","","",null,null],[16,"Output","","",36,null],[10,"map","","",36,null],[11,"map","","",34,null],[11,"map","","",37,null],[11,"map","","",35,null],[11,"new","","",38,{"inputs":[{"name":"m"},{"name":"map_op"}],"output":{"name":"map"}}],[11,"drive_unindexed","","",38,null],[11,"upper_bound","","",38,null],[11,"drive","","",38,null],[11,"len","","",38,null],[11,"with_producer","","",38,null],[11,"cost","","",39,null],[11,"split_at","","",39,null],[11,"into_iter","","",39,null],[11,"next","","",40,null],[0,"weight","rayon::par_iter","",null,null],[3,"Weight","rayon::par_iter::weight","",null,null],[3,"WeightProducer","","",null,null],[11,"new","","",41,{"inputs":[{"name":"m"},{"name":"f64"}],"output":{"name":"weight"}}],[11,"drive_unindexed","","",41,null],[11,"upper_bound","","",41,null],[11,"drive","","",41,null],[11,"len","","",41,null],[11,"with_producer","","",41,null],[11,"cost","","",42,null],[11,"split_at","","",42,null],[11,"into_iter","","",42,null],[0,"zip","rayon::par_iter","",null,null],[3,"ZipIter","rayon::par_iter::zip","",null,null],[3,"ZipProducer","","",null,null],[11,"new","","",43,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"zipiter"}}],[11,"drive_unindexed","","",43,null],[11,"upper_bound","","",43,null],[11,"drive","","",43,null],[11,"len","","",43,null],[11,"with_producer","","",43,null],[11,"cost","","",44,null],[11,"split_at","","",44,null],[11,"into_iter","","",44,null],[0,"range","rayon::par_iter","",null,null],[3,"RangeIter","rayon::par_iter::range","",null,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[11,"drive_unindexed","","",45,null],[11,"upper_bound","","",45,null],[11,"drive","","",45,null],[11,"len","","",45,null],[11,"with_producer","","",45,null],[11,"cost","","",45,null],[11,"split_at","","",45,null],[11,"into_iter","","",45,null],[0,"vec","rayon::par_iter","",null,null],[3,"VecIter","rayon::par_iter::vec","",null,null],[3,"VecProducer","","",null,null],[3,"SliceDrain","","",null,null],[11,"drive_unindexed","","",46,null],[11,"upper_bound","","",46,null],[11,"drive","","",46,null],[11,"len","","",46,null],[11,"with_producer","","",46,null],[11,"cost","","",47,null],[11,"split_at","","",47,null],[11,"into_iter","","",47,null],[11,"drop","","",47,null],[11,"next","","",48,null],[11,"drop","","",48,null],[0,"option","rayon::par_iter","",null,null],[3,"OptionIter","rayon::par_iter::option","",null,null],[3,"OptionProducer","","",null,null],[11,"drive_unindexed","","",49,null],[11,"upper_bound","","",49,null],[11,"drive","","",49,null],[11,"len","","",49,null],[11,"with_producer","","",49,null],[11,"cost","","",50,null],[11,"split_at","","",50,null],[11,"into_iter","","",50,null],[0,"collections","rayon::par_iter","",null,null],[8,"IntoParallelIterator","","",null,null],[16,"Iter","","",51,null],[16,"Item","","",51,null],[10,"into_par_iter","","",51,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",52,null],[16,"Item","","",52,null],[10,"par_iter","","",52,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",53,null],[16,"Item","","",53,null],[10,"par_iter_mut","","",53,null],[8,"ToParallelChunks","","",null,null],[16,"Iter","","",54,null],[16,"Item","","",54,null],[10,"par_chunks","","Returns a parallel iterator over at most `size` elements of\n`self` at a time. The chunks do not overlap.",54,null],[8,"ToParallelChunksMut","","",null,null],[16,"Iter","","",55,null],[16,"Item","","",55,null],[10,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of\n`self` at a time. The chunks are mutable and do not overlap.",55,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",56,null],[11,"weight","","Indicates the relative &quot;weight&quot; of producing each item in this\nparallel iterator. A higher weight will cause finer-grained\nparallel subtasks. 1.0 indicates something very cheap and\nuniform, like copying a value out of an array, or computing `x\n+ 1`. If your tasks are either very expensive, or very\nunpredictable, you are better off with higher values. See also\n`weight_max`, which is a convenient shorthand to force the\nfinest grained parallel execution posible. Tuning this value\nshould not affect correctness but can improve (or hurt)\nperformance.",56,null],[11,"weight_max","","Shorthand for `self.weight(f64::INFINITY)`. This forces the\nsmallest granularity of parallel execution, which makes sense\nwhen your parallel tasks are (potentially) very expensive to\nexecute.",56,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",56,null],[11,"map","","Applies `map_op` to each item of this iterator, producing a new\niterator with the results.",56,null],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be\nuseful when you have an iterator over `&amp;T`, but you need `T`.",56,null],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator,\nproducing a new iterator passing through the original items.  This is\noften useful for debugging to see what&#39;s happening in iterator stages.",56,null],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new\niterator with only the items that gave `true` results.",56,null],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`,\nproducing a new iterator with only the items from `Some` results.",56,null],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators,\nproducing a new iterator that flattens these back into one.",56,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`.\nSee also `sum`, `mul`, `min`, etc, which are slightly more\nefficient. Returns `None` if the iterator is empty.",56,null],[11,"reduce_with_identity","","Reduces the items in the iterator into one item using `op`.\nThe argument `identity` represents an &quot;identity&quot; value which\nmay be inserted into the sequence as needed to create\nopportunities for parallel execution. So, for example, if you\nare doing a summation, then `identity` ought to be something\nthat represents the zero for your type (but consider just\ncalling `sum()` in that case).",56,null],[11,"sum","","Sums up the items in the iterator.",56,null],[11,"mul","","Multiplies all the items in the iterator.",56,null],[11,"min","","Computes the minimum of all the items in the iterator.",56,null],[11,"max","","Computes the maximum of all the items in the iterator.",56,null],[11,"reduce","","Reduces the items using the given &quot;reduce operator&quot;. You may\nprefer `reduce_with` for a simpler interface.",56,null],[11,"chain","","Takes two iterators and creates a new iterator over both.",56,null],[8,"BoundedParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is not known, but we can at least give an upper-bound. These\nsorts of iterators result from filtering.",null,null],[10,"upper_bound","","",57,null],[8,"ExactParallelIterator","","A trait for parallel iterators items where the precise number of\nitems is known. This occurs when e.g. iterating over a\nvector. Knowing precisely how many items will be produced is very\nuseful.",null,null],[10,"len","","Produces an exact count of how many items this iterator will\nproduce, presuming no panic occurs.",58,null],[11,"collect_into","","Collects the results of the iterator into the specified\nvector. The vector is always truncated before execution\nbegins. If possible, reusing the vector across calls can lead\nto better performance since it reuses the same backing buffer.",58,null],[8,"IndexedParallelIterator","","An iterator that supports &quot;random access&quot; to its data, meaning\nthat you can split it at arbitrary indices and draw data from\nthose points.",null,null],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from\nthis iterator and `B` are from the iterator given as argument.\nLike the `zip` method on ordinary iterators, if the two\niterators are of unequal length, you only get the items they\nhave in common.",59,null],[11,"enumerate","","Yields an index along with each item.",59,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits.\nThe intention is that one can include `use rayon::prelude::*` and\nhave easy access to the various traits and methods you will need.",null,null]],"paths":[[4,"InitError"],[3,"Configuration"],[3,"ThreadPool"],[3,"ChainIter"],[3,"ChainProducer"],[3,"Enumerate"],[3,"EnumerateProducer"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"NoopReducer"],[3,"ParallelLen"],[8,"ReduceOp"],[3,"ReduceFolder"],[3,"SumOp"],[3,"MulOp"],[3,"MinOp"],[3,"MaxOp"],[3,"ReduceWithOp"],[3,"ReduceWithIdentityOp"],[3,"SliceIter"],[3,"ChunksIter"],[3,"SliceProducer"],[3,"SliceChunksProducer"],[3,"SliceIterMut"],[3,"ChunksMutIter"],[3,"SliceMutProducer"],[3,"SliceChunksMutProducer"],[3,"MapFn"],[3,"MapInspect"],[8,"MapOp"],[3,"MapCloned"],[3,"Map"],[3,"MapProducer"],[3,"MapIter"],[3,"Weight"],[3,"WeightProducer"],[3,"ZipIter"],[3,"ZipProducer"],[3,"RangeIter"],[3,"VecIter"],[3,"VecProducer"],[3,"SliceDrain"],[3,"OptionIter"],[3,"OptionProducer"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ToParallelChunks"],[8,"ToParallelChunksMut"],[8,"ParallelIterator"],[8,"BoundedParallelIterator"],[8,"ExactParallelIterator"],[8,"IndexedParallelIterator"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"cmp","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,null],[11,"bitand","","",2,null],[11,"bitor","","",2,null],[11,"bitor","","",2,null],[11,"bitxor","","",2,null],[11,"bitxor","","",2,null],[11,"shl","","",2,null],[11,"shr","","",2,null],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,null],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,null],[11,"add","","",2,null],[11,"sub","","",2,null],[11,"sub","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"div","","",2,null],[11,"div","","",2,null],[11,"rem","","",2,null],[11,"rem","","",2,null],[11,"neg","","",2,null],[11,"checked_add","","",2,null],[11,"checked_sub","","",2,null],[11,"checked_mul","","",2,null],[11,"checked_div","","",2,null],[11,"div_rem","","",2,null],[11,"div_floor","","",2,null],[11,"mod_floor","","",2,null],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,null],[11,"to_i64","","",2,null],[11,"to_u64","","",2,null],[11,"to_f32","","",2,null],[11,"to_f64","","",2,null],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,null],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"neg","","Negate Sign value.",1,null],[11,"mul","","",1,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"eq","","",3,null],[11,"partial_cmp","","",3,null],[11,"cmp","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,null],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,null],[11,"abs_sub","","",3,null],[11,"signum","","",3,null],[11,"is_positive","","",3,null],[11,"is_negative","","",3,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"div","","",3,null],[11,"div","","",3,null],[11,"rem","","",3,null],[11,"rem","","",3,null],[11,"neg","","",3,null],[11,"checked_add","","",3,null],[11,"checked_sub","","",3,null],[11,"checked_mul","","",3,null],[11,"checked_div","","",3,null],[11,"div_rem","","",3,null],[11,"div_floor","","",3,null],[11,"mod_floor","","",3,null],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,null],[11,"to_i64","","",3,null],[11,"to_u64","","",3,null],[11,"to_f32","","",3,null],[11,"to_f64","","",3,null],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,null],[11,"to_bigint","","",2,null],[11,"to_biguint","","",3,null],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",3,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",3,null],[11,"checked_add","","",3,null],[11,"checked_sub","","",3,null],[11,"checked_mul","","",3,null],[11,"checked_div","","",3,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",6,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",6,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",6,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["toml"] = {"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[13,"Custom","","A custom error type was generated",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"CustomError","","A custom error was generated when decoding.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[13,"InvalidType","","Produced by serde ...",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a\ntable definition, but the TOML spec requires a newline after a table\ndefinition header.",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,null],[11,"lookup","","Parse a path into a vector of paths",0,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",7,null],[11,"emit_nil","","",2,null],[11,"emit_usize","","",2,null],[11,"emit_u8","","",2,null],[11,"emit_u16","","",2,null],[11,"emit_u32","","",2,null],[11,"emit_u64","","",2,null],[11,"emit_isize","","",2,null],[11,"emit_i8","","",2,null],[11,"emit_i16","","",2,null],[11,"emit_i32","","",2,null],[11,"emit_i64","","",2,null],[11,"emit_bool","","",2,null],[11,"emit_f32","","",2,null],[11,"emit_f64","","",2,null],[11,"emit_char","","",2,null],[11,"emit_str","","",2,null],[11,"emit_enum","","",2,null],[11,"emit_enum_variant","","",2,null],[11,"emit_enum_variant_arg","","",2,null],[11,"emit_enum_struct_variant","","",2,null],[11,"emit_enum_struct_variant_field","","",2,null],[11,"emit_struct","","",2,null],[11,"emit_struct_field","","",2,null],[11,"emit_tuple","","",2,null],[11,"emit_tuple_arg","","",2,null],[11,"emit_tuple_struct","","",2,null],[11,"emit_tuple_struct_arg","","",2,null],[11,"emit_option","","",2,null],[11,"emit_option_none","","",2,null],[11,"emit_option_some","","",2,null],[11,"emit_seq","","",2,null],[11,"emit_seq_elt","","",2,null],[11,"emit_map","","",2,null],[11,"emit_map_elt_key","","",2,null],[11,"emit_map_elt_val","","",2,null],[11,"encode","","",7,null],[11,"fmt","","",5,null],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"read_nil","","",3,null],[11,"read_usize","","",3,null],[11,"read_u64","","",3,null],[11,"read_u32","","",3,null],[11,"read_u16","","",3,null],[11,"read_u8","","",3,null],[11,"read_isize","","",3,null],[11,"read_i64","","",3,null],[11,"read_i32","","",3,null],[11,"read_i16","","",3,null],[11,"read_i8","","",3,null],[11,"read_bool","","",3,null],[11,"read_f64","","",3,null],[11,"read_f32","","",3,null],[11,"read_char","","",3,null],[11,"read_str","","",3,null],[11,"read_enum","","",3,null],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,null],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,null],[11,"read_struct","","",3,null],[11,"read_struct_field","","",3,null],[11,"read_tuple","","",3,null],[11,"read_tuple_arg","","",3,null],[11,"read_tuple_struct","","",3,null],[11,"read_tuple_struct_arg","","",3,null],[11,"read_option","","",3,null],[11,"read_seq","","",3,null],[11,"read_seq_elt","","",3,null],[11,"read_map","","",3,null],[11,"read_map_elt_key","","",3,null],[11,"read_map_elt_val","","",3,null],[11,"error","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"same_type","","Tests whether this and another value have the same type.",7,null],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,null],[11,"as_str","","Extracts the string of this value if it is a string.",7,null],[11,"as_integer","","Extracts the integer value if it is an integer.",7,null],[11,"as_float","","Extracts the float value if it is a float.",7,null],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,null],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,null],[11,"as_slice","","Extracts the array value if it is an array.",7,null],[11,"as_table","","Extracts the table value if it is a table.",7,null],[11,"lookup","","Lookups for value at specified path.",7,null],[11,"lookup_mut","","Lookups for mutable value at specified path.",7,null],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex["deque"] = {"doc":"A (mostly) lock-free concurrent work-stealing deque","items":[[3,"Worker","deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method.",null,null],[4,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",0,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",0,null],[13,"Data","","The stealer has successfully stolen some data.",0,null],[5,"new","","Allocates a new work-stealing deque.",null,null],[11,"clone","","",1,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"push","","Pushes data onto the front of this work queue.",2,null],[11,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",2,null],[11,"steal","","Steals work off the end of the queue (opposite of the worker&#39;s end)",1,null]],"paths":[[4,"Stolen"],[3,"Stealer"],[3,"Worker"]]};
searchIndex["rmp_serialize"] = {"doc":"## Examples","items":[[0,"decode","rmp_serialize","",null,null],[3,"Decoder","rmp_serialize::decode","# Note",null,null],[4,"Error","","Unstable: docs; incomplete",null,null],[13,"TypeMismatch","","The actual value type isn&#39;t equal with the expected one.",0,null],[13,"InvalidMarkerRead","","",0,null],[13,"InvalidDataRead","","",0,null],[13,"LengthMismatch","","",0,null],[13,"Uncategorized","","Uncategorized error.",0,null],[6,"Result","","",null,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"fixedvaluereaderror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"valuereaderror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"decodestringerror"}],"output":{"name":"error"}}],[11,"new","","",1,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"get_ref","","Gets a reference to the underlying reader in this decoder.",1,null],[11,"get_mut","","Gets a mutable reference to the underlying reader in this decoder.",1,null],[11,"into_inner","","Consumes this decoder returning the underlying reader.",1,null],[11,"read_nil","","",1,null],[11,"read_bool","","",1,null],[11,"read_u8","","",1,null],[11,"read_u16","","",1,null],[11,"read_u32","","",1,null],[11,"read_u64","","",1,null],[11,"read_usize","","TODO: Doesn&#39;t look safe.",1,null],[11,"read_i8","","",1,null],[11,"read_i16","","",1,null],[11,"read_i32","","",1,null],[11,"read_i64","","",1,null],[11,"read_isize","","TODO: Doesn&#39;t look safe.",1,null],[11,"read_f32","","",1,null],[11,"read_f64","","",1,null],[11,"read_char","","",1,null],[11,"read_str","","",1,null],[11,"read_enum","","",1,null],[11,"read_enum_variant","","",1,null],[11,"read_enum_variant_arg","","",1,null],[11,"read_enum_struct_variant","","",1,null],[11,"read_enum_struct_variant_field","","",1,null],[11,"read_struct","","",1,null],[11,"read_struct_field","","",1,null],[11,"read_tuple","","",1,null],[11,"read_tuple_arg","","",1,null],[11,"read_tuple_struct","","",1,null],[11,"read_tuple_struct_arg","","",1,null],[11,"read_option","","We treat Value::Null as None.",1,null],[11,"read_seq","","",1,null],[11,"read_seq_elt","","",1,null],[11,"read_map","","",1,null],[11,"read_map_elt_key","","",1,null],[11,"read_map_elt_val","","",1,null],[11,"error","","",1,null],[0,"encode","rmp_serialize","",null,null],[3,"Encoder","rmp_serialize::encode","Represents MessagePack serialization implementation.",null,null],[4,"Error","","",null,null],[13,"InvalidFixedValueWrite","","Failed to write MessagePack&#39;ed single-byte value into the write.",2,null],[13,"InvalidValueWrite","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"valuewriteerror"}],"output":{"name":"error"}}],[11,"new","","Creates a new MessagePack encoder whose output will be written to the writer specified.",3,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",3,null],[11,"emit_bool","","",3,null],[11,"emit_u8","","",3,null],[11,"emit_u16","","",3,null],[11,"emit_u32","","",3,null],[11,"emit_u64","","",3,null],[11,"emit_usize","","",3,null],[11,"emit_i8","","",3,null],[11,"emit_i16","","",3,null],[11,"emit_i32","","",3,null],[11,"emit_i64","","",3,null],[11,"emit_isize","","",3,null],[11,"emit_f32","","",3,null],[11,"emit_f64","","",3,null],[11,"emit_char","","",3,null],[11,"emit_str","","",3,null],[11,"emit_enum","","Encodes and attempts to write the enum value into the Write.",3,null],[11,"emit_enum_variant","","Encodes and attempts to write a concrete variant value.",3,null],[11,"emit_enum_variant_arg","","Encodes and attempts to write a concrete variant value arguments.",3,null],[11,"emit_enum_struct_variant","","",3,null],[11,"emit_enum_struct_variant_field","","",3,null],[11,"emit_struct","","",3,null],[11,"emit_struct_field","","",3,null],[11,"emit_tuple","","",3,null],[11,"emit_tuple_arg","","",3,null],[11,"emit_tuple_struct","","",3,null],[11,"emit_tuple_struct_arg","","",3,null],[11,"emit_option","","",3,null],[11,"emit_option_none","","",3,null],[11,"emit_option_some","","",3,null],[11,"emit_seq","","",3,null],[11,"emit_seq_elt","","",3,null],[11,"emit_map","","",3,null],[11,"emit_map_elt_key","","",3,null],[11,"emit_map_elt_val","","",3,null]],"paths":[[4,"Error"],[3,"Decoder"],[4,"Error"],[3,"Encoder"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &amp;T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"rciter","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"clone","itertools","",42,null],[11,"new","","Create a new **PadUsing** iterator.",42,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",43,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"new","","Create a new `RepeatCall` from a closure.",44,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",45,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",46,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,null],[11,"len","","Return the number of elements in the iterator.",45,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"index","","Return a reference to the element at a given index.",45,null],[11,"fmt","","",45,null],[11,"len","","",45,null],[11,"get_unchecked","","",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",46,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",46,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",46,null],[11,"len","","Return the number of elements in the iterator.",46,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"index","","Return a reference to the element at a given index.",46,null],[11,"fmt","","",46,null],[11,"len","","",46,null],[11,"get_unchecked","","",46,null],[11,"clone","","",45,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"new","","Create a new `ZipLongest` iterator.",49,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",50,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",50,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",51,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",51,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"len","","",51,null],[11,"get_unchecked","","",51,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",52,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",52,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",52,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",52,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",52,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",52,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",52,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",52,null],[11,"slice","","Return a sliced iterator.",52,null],[11,"into_rc","","**Deprecated:** use `itertools::free::rciter` instead.\n(It&#39;s an iterator constructor, not an adaptor).",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",52,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",52,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",52,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",52,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",52,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",52,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",52,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",52,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",52,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",52,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",52,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",52,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",52,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",52,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",52,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",52,null],[11,"flatten","","Unravel a nested iterator.",52,null],[11,"map_fn","","**Deprecated:** Will be removed in the next version",52,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",52,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",52,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",52,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",52,null],[11,"format","","Format all iterator elements, separated by `sep`.",52,null],[11,"fold_results","","Fold `Result` values from an iterator.",52,null],[11,"fold_options","","Fold `Option` values from an iterator.",52,null],[11,"fold1","","Accumulator of the elements in the iterator.",52,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",52,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",52,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",52,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",52,null],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by\nthe specified comparison function.",52,null],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",40,null],[12,"e_exit","","",40,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",41,null],[12,"tv_usec","","",41,null],[3,"utmpx","","",null,null],[12,"ut_type","","",42,null],[12,"ut_pid","","",42,null],[12,"ut_line","","",42,null],[12,"ut_id","","",42,null],[12,"ut_user","","",42,null],[12,"ut_host","","",42,null],[12,"ut_exit","","",42,null],[12,"ut_session","","",42,null],[12,"ut_tv","","",42,null],[12,"ut_addr_v6","","",42,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",43,null],[12,"sa_mask","","",43,null],[12,"sa_flags","","",43,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",45,null],[12,"si_errno","","",45,null],[12,"si_code","","",45,null],[12,"_pad","","",45,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",46,null],[12,"gl_pathv","","",46,null],[12,"gl_offs","","",46,null],[12,"gl_flags","","",46,null],[3,"ucred","","",null,null],[12,"pid","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[3,"statfs","","",null,null],[12,"f_type","","",48,null],[12,"f_bsize","","",48,null],[12,"f_blocks","","",48,null],[12,"f_bfree","","",48,null],[12,"f_bavail","","",48,null],[12,"f_files","","",48,null],[12,"f_ffree","","",48,null],[12,"f_fsid","","",48,null],[12,"f_namelen","","",48,null],[12,"f_frsize","","",48,null],[3,"msghdr","","",null,null],[12,"msg_name","","",49,null],[12,"msg_namelen","","",49,null],[12,"msg_iov","","",49,null],[12,"msg_iovlen","","",49,null],[12,"msg_control","","",49,null],[12,"msg_controllen","","",49,null],[12,"msg_flags","","",49,null],[3,"termios","","",null,null],[12,"c_iflag","","",50,null],[12,"c_oflag","","",50,null],[12,"c_cflag","","",50,null],[12,"c_lflag","","",50,null],[12,"c_line","","",50,null],[12,"c_cc","","",50,null],[12,"c_ispeed","","",50,null],[12,"c_ospeed","","",50,null],[3,"flock","","",null,null],[12,"l_type","","",51,null],[12,"l_whence","","",51,null],[12,"l_start","","",51,null],[12,"l_len","","",51,null],[12,"l_pid","","",51,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",52,null],[12,"loads","","",52,null],[12,"totalram","","",52,null],[12,"freeram","","",52,null],[12,"sharedram","","",52,null],[12,"bufferram","","",52,null],[12,"totalswap","","",52,null],[12,"freeswap","","",52,null],[12,"procs","","",52,null],[12,"pad","","",52,null],[12,"totalhigh","","",52,null],[12,"freehigh","","",52,null],[12,"mem_unit","","",52,null],[12,"_f","","",52,null],[3,"stat","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"stat64","","",null,null],[12,"st_dev","","",54,null],[12,"st_ino","","",54,null],[12,"st_nlink","","",54,null],[12,"st_mode","","",54,null],[12,"st_uid","","",54,null],[12,"st_gid","","",54,null],[12,"st_rdev","","",54,null],[12,"st_size","","",54,null],[12,"st_blksize","","",54,null],[12,"st_blocks","","",54,null],[12,"st_atime","","",54,null],[12,"st_atime_nsec","","",54,null],[12,"st_mtime","","",54,null],[12,"st_mtime_nsec","","",54,null],[12,"st_ctime","","",54,null],[12,"st_ctime_nsec","","",54,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",55,null],[12,"exponent","","",55,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",57,null],[12,"swd","","",57,null],[12,"ftw","","",57,null],[12,"fop","","",57,null],[12,"rip","","",57,null],[12,"rdp","","",57,null],[12,"mxcsr","","",57,null],[12,"mxcr_mask","","",57,null],[12,"_st","","",57,null],[12,"_xmm","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[3,"ipc_perm","","",null,null],[12,"__key","","",60,null],[12,"uid","","",60,null],[12,"gid","","",60,null],[12,"cuid","","",60,null],[12,"cgid","","",60,null],[12,"mode","","",60,null],[12,"__seq","","",60,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",61,null],[12,"shm_segsz","","",61,null],[12,"shm_atime","","",61,null],[12,"shm_dtime","","",61,null],[12,"shm_ctime","","",61,null],[12,"shm_cpid","","",61,null],[12,"shm_lpid","","",61,null],[12,"shm_nattch","","",61,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",62,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",63,null],[11,"clone","","",52,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",64,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",70,null],[11,"clone","","",38,null],[11,"clone","","",71,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",72,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",6,null],[11,"cmp","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that&#39;s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,null],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,null],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,null],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4,{"inputs":[],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `&quot;^1.2.3&quot;`\nand turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,null]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["rmp"] = {"doc":"# The Rust MessagePack Library","items":[[4,"Marker","rmp","",null,null],[13,"FixPos","","",0,null],[13,"FixNeg","","",0,null],[13,"Null","","",0,null],[13,"True","","",0,null],[13,"False","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"FixStr","","",0,null],[13,"Str8","","",0,null],[13,"Str16","","",0,null],[13,"Str32","","",0,null],[13,"Bin8","","",0,null],[13,"Bin16","","",0,null],[13,"Bin32","","",0,null],[13,"FixArray","","",0,null],[13,"Array16","","",0,null],[13,"Array32","","",0,null],[13,"FixMap","","",0,null],[13,"Map16","","",0,null],[13,"Map32","","",0,null],[13,"FixExt1","","",0,null],[13,"FixExt2","","",0,null],[13,"FixExt4","","",0,null],[13,"FixExt8","","",0,null],[13,"FixExt16","","",0,null],[13,"Ext8","","",0,null],[13,"Ext16","","",0,null],[13,"Ext32","","",0,null],[13,"Reserved","","",0,null],[0,"encode","","Provides various functions and structs for MessagePack encoding.",null,null],[3,"WriteError","rmp::encode","Represents an error that can occur when attempting to write MessagePack&#39;ed value into the write.",null,null],[12,"0","","",1,null],[3,"MarkerWriteError","","Represents an error that can occur when attempting to write marker into the write.",null,null],[3,"FixedValueWriteError","","Represents an error that can occur when attempting to write MessagePack&#39;ed single-byte value.",null,null],[12,"0","","",2,null],[4,"ValueWriteError","","Represents an error that can occur when attempring to write MessagePack&#39;ed complex value into\nthe write.",null,null],[13,"InvalidMarkerWrite","","IO error while writing marker.",3,null],[13,"InvalidDataWrite","","IO error while writing data.",3,null],[5,"write_nil","","Encodes and attempts to write a nil value into the given write.",null,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[5,"write_bool","","Encodes and attempts to write a bool value into the given write.",null,{"inputs":[{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[5,"write_pfix","","Encodes and attempts to write an unsigned small integer value as a positive fixint into the\ngiven write.",null,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[5,"write_nfix","","Encodes and attempts to write a negative small integer value as a negative fixnum into the\ngiven write.",null,{"inputs":[{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[5,"write_u8","","Encodes and attempts to write an `u8` value as a 2-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[5,"write_u16","","Encodes and attempts to write an `u16` value strictly as a 3-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[5,"write_u32","","Encodes and attempts to write an `u32` value strictly as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_u64","","Encodes and attempts to write an `u64` value strictly as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[5,"write_i8","","Encodes and attempts to write an `i8` value as a 2-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[5,"write_i16","","Encodes and attempts to write an `i16` value as a 3-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[5,"write_i32","","Encodes and attempts to write an `i32` value as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[5,"write_i64","","Encodes and attempts to write an `i64` value as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_uint","","Encodes and attempts to write an `u64` value into the given write using the most efficient\nrepresentation, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[5,"write_sint","","Encodes and attempts to write an `i64` value into the given write using the most efficient\nrepresentation, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_sint_eff","","Encodes and attempts to write an `i64` value using the most effective representation.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[5,"write_f32","","Encodes and attempts to write an `f32` value as a 5-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[5,"write_f64","","Encodes and attempts to write an `f64` value as a 9-byte sequence into the given write.",null,{"inputs":[{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[5,"write_str_len","","Encodes and attempts to write the most efficient string length implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_str","","Encodes and attempts to write the most efficient string implementation to the given `Write`.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"write_bin_len","","Encodes and attempts to write the most efficient binary array length implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_bin","","Encodes and attempts to write the most efficient binary implementation to the given `Write`.",null,null],[5,"write_array_len","","Encodes and attempts to write the most efficient array length implementation to the given write,\nreturning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_map_len","","Encodes and attempts to write the most efficient map length implementation to the given write,\nreturning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[5,"write_ext_meta","","Encodes and attempts to write the most efficient ext metadata implementation to the given\nwrite, returning the marker used.",null,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"i8"}],"output":{"name":"result"}}],[0,"value_ref","","This module is UNSTABLE, the reason is - recently added.",null,null],[3,"Error","rmp::encode::value_ref","",null,null],[5,"write_value_ref","","Encodes and attempts to write the given non-owning ValueRef into the Write.",null,{"inputs":[{"name":"w"},{"name":"valueref"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"from","","",4,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"valuewriteerror"}],"output":{"name":"error"}}],[0,"value","rmp::encode","",null,null],[4,"Error","rmp::encode::value","",null,null],[13,"UnstableCommonError","","",5,null],[5,"write_value","","Encodes and attempts to write the most efficient representation of the given Value.",null,{"inputs":[{"name":"w"},{"name":"value"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"valuewriteerror"}],"output":{"name":"error"}}],[11,"fmt","rmp::encode","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"writeerror"}}],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"markerwriteerror"}}],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"markerwriteerror"}],"output":{"name":"valuewriteerror"}}],[11,"from","","",3,{"inputs":[{"name":"fixedvaluewriteerror"}],"output":{"name":"valuewriteerror"}}],[0,"decode","rmp","Provides various functions and structs for MessagePack decoding.",null,null],[3,"ExtMeta","rmp::decode","",null,null],[12,"typeid","","",7,null],[12,"size","","",7,null],[4,"ReadError","","Represents an error that can occur when attempting to read bytes from the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading bytes.",8,null],[13,"Io","","I/O error occurred while reading bytes.",8,null],[4,"MarkerReadError","","Represents an error that can occur when attempting to read a MessagePack marker from the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading the marker.",9,null],[13,"Io","","I/O error occurred while reading the marker.",9,null],[4,"FixedValueReadError","","Represents an error that can occur when attempting to read a MessagePack&#39;ed single-byte value\nfrom the reader.",null,null],[13,"UnexpectedEOF","","Unexpected end of file reached while reading the value.",10,null],[13,"Io","","I/O error occurred while reading the value.",10,null],[13,"TypeMismatch","","The type decoded isn&#39;t match with the expected one.",10,null],[4,"ValueReadError","","Represents an error that can occur when attempting to read a MessagePack&#39;ed complex value from\nthe reader.",null,null],[13,"InvalidMarkerRead","","Failed to read the marker.",11,null],[13,"InvalidDataRead","","Failed to read the data.",11,null],[13,"TypeMismatch","","The type decoded isn&#39;t match with the expected one.",11,null],[4,"DecodeStringError","","",null,null],[13,"InvalidMarkerRead","","",12,null],[13,"InvalidDataRead","","",12,null],[13,"TypeMismatch","","",12,null],[13,"BufferSizeTooSmall","","The given buffer is not large enough to accumulate the specified amount of bytes.",12,null],[13,"InvalidDataCopy","","",12,null],[13,"InvalidUtf8","","",12,null],[5,"read_marker","","Attempts to read a single byte from the given reader and decodes it as a MessagePack marker.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_nil","","Attempts to read a single byte from the given reader and to decode it as a nil value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bool","","Attempts to read a single byte from the given reader and to decode it as a boolean value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_pfix","","Attempts to read a single byte from the given reader and to decode it as a positive fixnum\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_nfix","","Attempts to read a single byte from the given reader and to decode it as a negative fixnum\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_numeric_data","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `u8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `u16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `u32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `u64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8","","Attempts to read exactly 2 bytes from the given reader and to decode them as `i8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16","","Attempts to read exactly 3 bytes from the given reader and to decode them as `i16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `i32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `i64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8_loosely","","Attempts to read up to 2 bytes from the given reader and to decode them as `u8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16_loosely","","Attempts to read up to 3 bytes from the given reader and to decode them as `u16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32_loosely","","Attempts to read up to 5 bytes from the given reader and to decode them as `u32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64_loosely","","Attempts to read up to 9 bytes from the given reader and to decode them as `u64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8_loosely","","Attempts to read up to 2 bytes from the given reader and to decode them as `i8` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16_loosely","","Attempts to read up to 3 bytes from the given reader and to decode them as `i16` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32_loosely","","Attempts to read up to 5 bytes from the given reader and to decode them as `i32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64_loosely","","Attempts to read up to 9 bytes from the given reader and to decode them as `i64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i8_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i16_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i32_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_i64_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u8_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u16_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u32_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_u64_fit","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_f32","","Attempts to read exactly 5 bytes from the given reader and to decode them as `f32` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_f64","","Attempts to read exactly 9 bytes from the given reader and to decode them as `f64` value.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_str_len","","Attempts to read up to 9 bytes from the given reader and to decode them as a string `u32` size\nvalue.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_str","","Attempts to read a string data from the given reader and copy it to the buffer provided.",null,null],[5,"read_str_data","","",null,null],[5,"read_str_ref","","Attempts to read and decode a string value from the reader, returning a borrowed slice from it.",null,null],[5,"read_array_size","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\narray size.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_map_size","","Attempts to read up to 5 bytes from the given reader and to decode them as a big-endian u32\nmap size.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bin_len","","Attempts to read up to 5 bytes from the given reader and to decode them as Binary array length.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_bin_borrow","","Attempts to read some bytes from the given slice until a complete Binary message is decoded,\nreturning a borrowed slice with the data.",null,null],[5,"read_fixext1","","Attempts to read exactly 3 bytes from the given reader and interpret them as a fixext1 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext2","","Attempts to read exactly 4 bytes from the given reader and interpret them as a fixext2 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext4","","Attempts to read exactly 6 bytes from the given reader and interpret them as a fixext4 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext8","","Attempts to read exactly 10 bytes from the given reader and interpret them as a fixext8 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_fixext16","","Attempts to read exactly 18 bytes from the given reader and interpret them as a fixext16 type\nwith data attached.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_full","","Copies the contents of a reader into a buffer until fully filled.",null,null],[5,"read_ext_meta","","Unstable: docs, errors",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"value_ref","","This module is UNSTABLE, the reason is - recently added.",null,null],[4,"Error","rmp::decode::value_ref","",null,null],[13,"InvalidMarkerRead","","Failed to read the type marker value.",13,null],[13,"InvalidLengthRead","","Failed to read string/array/map size.",13,null],[13,"InvalidDataRead","","Failed to read packed non-marker data.",13,null],[13,"InvalidLengthSize","","Failed to cast the length read to machine size.",13,null],[13,"InvalidUtf8","","Failed to interpret a byte slice as a UTF-8 string.",13,null],[13,"InvalidExtTypeRead","","Failed to read ext type.",13,null],[13,"TypeMismatch","","Using Reserved type found.",13,null],[5,"read_value_ref","","Attempts to read the data from the given reader until either a complete MessagePack value\ndecoded or an error detected.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[8,"BorrowRead","","A BorrowRead is a type of Reader which has an internal buffer.",null,null],[10,"fill_buf","","Returns the buffer contents.",14,null],[10,"consume","","Tells this buffer that len bytes have been consumed from the buffer, so they should no\nlonger be returned in calls to read.",14,null],[11,"fmt","","",13,null],[11,"description","","",13,null],[11,"cause","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"error"}}],[0,"value","rmp::decode","",null,null],[4,"Error","rmp::decode::value","",null,null],[13,"InvalidMarkerRead","","",15,null],[13,"InvalidDataRead","","",15,null],[13,"TypeMismatch","","",15,null],[13,"BufferSizeTooSmall","","",15,null],[13,"InvalidDataCopy","","",15,null],[13,"InvalidUtf8","","",15,null],[13,"InvalidArrayRead","","",15,null],[13,"InvalidMapKeyRead","","",15,null],[13,"InvalidMapValueRead","","",15,null],[5,"read_value","","Attempts to read bytes from the given reader and interpret them as a `Value`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",15,null],[11,"description","","",15,null],[11,"cause","","",15,null],[11,"fmt","","",15,null],[11,"from","","",15,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"valuereaderror"}],"output":{"name":"error"}}],[11,"from","","",15,{"inputs":[{"name":"decodestringerror"}],"output":{"name":"error"}}],[8,"BigEndianRead","rmp::decode","",null,null],[10,"read","","",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",8,null],[11,"description","","",8,null],[11,"cause","","",8,null],[11,"fmt","","",8,null],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"readerror"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"readerror"}}],[11,"fmt","","",9,null],[11,"description","","",9,null],[11,"cause","","",9,null],[11,"fmt","","",9,null],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"markerreaderror"}}],[11,"from","","",8,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"readerror"}}],[11,"fmt","","",10,null],[11,"description","","",10,null],[11,"cause","","",10,null],[11,"fmt","","",10,null],[11,"from","","",10,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"fixedvaluereaderror"}}],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"markerreaderror"}],"output":{"name":"valuereaderror"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"valuereaderror"}],"output":{"name":"decodestringerror"}}],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","rmp","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"from_u8","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"marker"}}],[11,"to_u8","","",0,null],[0,"value","","Contains Value and ValueRef structs and its conversion traits.",null,null],[4,"Integer","rmp::value","Integer representation.",null,null],[13,"U64","","Every non-negative integer is treated as u64, even if it fits in i64.",17,null],[13,"I64","","Every negative integer is treated as i64.",17,null],[4,"Float","","Floating point numbers representation.",null,null],[13,"F32","","",18,null],[13,"F64","","",18,null],[4,"Value","","",null,null],[13,"Nil","","Nil represents nil.",19,null],[13,"Boolean","","Boolean represents true or false.",19,null],[13,"Integer","","Integer represents an integer.",19,null],[13,"Float","","Float represents a floating point number.",19,null],[13,"String","","String extending Raw type represents a UTF-8 string.",19,null],[13,"Binary","","Binary extending Raw type represents a byte array.",19,null],[13,"Array","","Array represents a sequence of objects.",19,null],[13,"Map","","Map represents key-value pairs of objects.",19,null],[13,"Ext","","Extended implements Extension interface: represents a tuple of type information and a byte\narray where type information is an integer whose meaning is defined by applications.",19,null],[4,"ValueRef","","",null,null],[13,"Nil","","Nil represents nil.",20,null],[13,"Boolean","","Boolean represents true or false.",20,null],[13,"Integer","","Integer represents an integer.",20,null],[13,"Float","","Float represents a floating point number.",20,null],[13,"String","","String extending Raw type represents a UTF-8 string.",20,null],[13,"Binary","","Binary extending Raw type represents a byte array.",20,null],[13,"Array","","Array represents a sequence of objects.",20,null],[13,"Map","","Map represents key-value pairs of objects.",20,null],[13,"Ext","","Extended implements Extension interface: represents a tuple of type information and a byte\narray where type information is an integer whose meaning is defined by applications.",20,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"is_nil","","Returns true if the `Value` is a Null. Returns false otherwise.",19,null],[11,"is_bool","","Returns true if the `Value` is a Boolean. Returns false otherwise.",19,null],[11,"is_i64","","Returns true if (and only if) the `Value` is a i64. Returns false otherwise.",19,null],[11,"is_u64","","Returns true if (and only if) the `Value` is a u64. Returns false otherwise.",19,null],[11,"is_f32","","Returns true if (and only if) the `Value` is a f32. Returns false otherwise.",19,null],[11,"is_f64","","Returns true if (and only if) the `Value` is a f64. Returns false otherwise.",19,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",19,null],[11,"is_str","","Returns true if the `Value` is a String. Returns false otherwise.",19,null],[11,"is_bin","","Returns true if the `Value` is a Binary. Returns false otherwise.",19,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",19,null],[11,"is_map","","Returns true if the `Value` is a Map. Returns false otherwise.",19,null],[11,"is_ext","","Returns true if the `Value` is an Ext. Returns false otherwise.",19,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",19,null],[11,"as_i64","","If the `Value` is an integer, return or cast it to a i64.\nReturns None otherwise.",19,null],[11,"as_u64","","If the `Value` is an integer, return or cast it to a u64.\nReturns None otherwise.",19,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",19,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",19,null],[11,"as_slice","","If the `Value` is a Binary, returns the associated slice.\nReturns None otherwise.",19,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",19,null],[11,"as_map","","If the `Value` is a Map, returns the associated vector of key-value tuples.\nReturns None otherwise.",19,null],[11,"as_ext","","If the `Value` is an Ext, returns the associated tuple with a ty and slice.\nReturns None otherwise.",19,null],[11,"index","","",19,null],[11,"from","","",19,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"isize"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"f32"}],"output":{"name":"value"}}],[11,"from","","",19,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"fmt","","",19,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"to_owned","","Converts the current non-owning value to an owned Value.",20,null],[17,"MSGPACK_VERSION","rmp","",null,null]],"paths":[[4,"Marker"],[3,"WriteError"],[3,"FixedValueWriteError"],[4,"ValueWriteError"],[3,"Error"],[4,"Error"],[3,"MarkerWriteError"],[3,"ExtMeta"],[4,"ReadError"],[4,"MarkerReadError"],[4,"FixedValueReadError"],[4,"ValueReadError"],[4,"DecodeStringError"],[4,"Error"],[8,"BorrowRead"],[4,"Error"],[8,"BigEndianRead"],[4,"Integer"],[4,"Float"],[4,"Value"],[4,"ValueRef"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"clone","","",0,null],[11,"into_inner","","Get the value out.",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"clone","","",1,null],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,null],[11,"as_ref","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"into","","",1,null],[11,"into","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"rem_assign","","",1,null],[11,"neg","","",1,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",2,null],[11,"into","","",2,null]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,null],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,null],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,null],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,null]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -&gt; T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -&gt; S, and a consumer C2 S -&gt; T, and makes a consumer R -&gt; T by applying C2 on C1&#39;s result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer&#39;s current computation state",null,null],[13,"Done","","A value of type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"description","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"is_known","","",2,null],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"is_done","","",3,null],[11,"is_err","","",3,null],[11,"is_incomplete","","",3,null],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",3,null],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",3,null],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",3,null],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"unwrap_err","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not\n`Done`.",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"remaining_input","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"output","","",3,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"map","","",5,null],[11,"flat_map","","",5,null],[11,"apply","","",8,null],[11,"new","","",9,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"apply","","",9,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,null],[11,"refill","","",10,null],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,null],[11,"apply","","",10,null],[11,"new","","",11,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,null],[11,"state","","",11,null],[11,"new","","",12,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,null],[11,"state","","",12,null],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,null],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,null],[8,"InputLength","","",null,null],[10,"input_len","","",14,null],[8,"AsChar","","",null,null],[10,"as_char","","",15,null],[10,"is_alpha","","",15,null],[10,"is_alphanum","","",15,null],[10,"is_0_to_9","","",15,null],[10,"is_hex_digit","","",15,null],[10,"is_oct_digit","","",15,null],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,null],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,null],[8,"GetOutput","","",null,null],[10,"output","","",19,null],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",20,null],[10,"state","","returns the current state",20,null],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer&#39;s state",21,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error","","Prevents backtracking if the child parser fails",null,null],[14,"add_error","","Add an error if the child parser fails",null,null],[14,"fix_error","","translate parser result from IResult&lt;I,O,u32&gt; to IResult&lt;I,O,E&gt; with a custom type",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map","","`flat_map!(R -&gt; IResult&lt;R,S&gt;, S -&gt; IResult&lt;S,T&gt;) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"map","","`map!(I -&gt; IResult&lt;I,O&gt;, O -&gt; P) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Result&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Option&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value","","`value!(T, R -&gt; IResult&lt;R, S&gt; ) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"expr_res","","`expr_res!(Result&lt;E,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Result&lt;T,E&gt; and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option&lt;O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Option&lt;T&gt; and returns a IResult::Done(I,T) if Some",null,null],[14,"chain","","`chain!(I-&gt;IResult&lt;I,A&gt; ~ I-&gt;IResult&lt;I,B&gt; ~ ... I-&gt;IResult&lt;I,X&gt; , || { return O } ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchains parsers and assemble the results through a closure",null,null],[14,"tuple","","`tuple!(I-&gt;IResult&lt;I,A&gt;, I-&gt;IResult&lt;I,B&gt;, ... I-&gt;IResult&lt;I,X&gt;) =&gt; I -&gt; IResult&lt;I, (A, B, ..., X)&gt;`\nchains parsers and assemble the sub results in a tuple.",null,null],[14,"alt","","`alt!(I -&gt; IResult&lt;I,O&gt; | I -&gt; IResult&lt;I,O&gt; | ... | I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete","","This is a combination of the `alt!` and `complete!` combinators. Rather\nthan returning `Incomplete` on partial input, `alt_complete!` will try the\nnext alternative in the chain. You should use this only if you know you\nwill not receive partial input for the rules you&#39;re trying to match (this\nis almost always the case for parsing programming languages).",null,null],[14,"switch","","`switch!(I -&gt; IResult&lt;I,P&gt;, P =&gt; I -&gt; IResult&lt;I,O&gt; | ... | P =&gt; I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt","","`opt!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Result&lt;nom::Err,O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond","","`cond!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nConditional combinator with error",null,null],[14,"peek","","`peek!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result without consuming the input",null,null],[14,"not","","`not!(I -&gt; IResult&lt;I,0&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result only if the embedded parser returns Error or Incomplete\ndoes not consume the input",null,null],[14,"tap","","`tap!(name: I -&gt; IResult&lt;I,O&gt; =&gt; { block }) =&gt; I -&gt; IResult&lt;I, O&gt;`\nallows access to the parser&#39;s result without affecting it",null,null],[14,"pair","","`pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I, T&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\npreceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,T&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nterminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,U&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list","","`separated_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_nonempty_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"many0","","`many0!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1","","`many1!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, [O; nb]&gt;`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value","","`length_value!(I -&gt; IResult&lt;I, nb&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"fold_many0","","`fold_many0!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs\n`apply!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"recognize","","`recognize!(&amp;[T] -&gt; IResult&lt;&amp;[T], O&gt; ) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag","","`tag!(&amp;[T]: nom::AsBytes) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ndeclares a byte array as a suite to recognize",null,null],[14,"is_not","","`is_not!(&amp;[T:AsBytes]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&amp;[T]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], Vec&lt;T&gt;&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(&amp;[T] -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till","","`take_till!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;str&gt;`\nsame as take! but returning a &amp;str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`",null,null],[14,"length_bytes","","`length_bytes!(&amp;[T] -&gt; IResult&lt;&amp;[T], nb&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits","","`bits!( parser ) =&gt; ( &amp;[u8], (&amp;[u8], usize) -&gt; IResult&lt;(&amp;[u8], usize), T&gt; ) -&gt; IResult&lt;&amp;[u8], T&gt;`\ntransforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"take_bits","","`take_bits!(type, nb) =&gt; ( (&amp;[T], usize), U, usize) -&gt; IResult&lt;(&amp;[T], usize), U&gt;`\ngenerates a parser consuming the specified number of bits.",null,null],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) =&gt; &amp;[u8] -&gt; IResult&lt;&amp;[u8], char&gt;",null,null],[14,"consumer_from_parser","","",null,null],[14,"tag_s","","`tag_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ndeclares a string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(&amp;str -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,null]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["quine_mc_cluskey"] = {"doc":"","items":[[3,"Essentials","quine_mc_cluskey","",null,null],[12,"minterms","","",0,null],[12,"essentials","","",0,null],[3,"Term","","",null,null],[4,"Bool","","",null,null],[13,"True","","",1,null],[13,"False","","",1,null],[13,"Term","","can be any number in `0..32`, anything else will cause panics or wrong results",1,null],[13,"And","","needs to contain at least two elements",1,null],[13,"Or","","needs to contain at least two elements",1,null],[13,"Not","","",1,null],[4,"TermFromStrError","","",null,null],[13,"Only32TermsSupported","","",2,null],[13,"UnsupportedCharacter","","",2,null],[5,"simplify_prime_implicant_expr","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"essential_minterms","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"essentials"}}],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"not","","",1,null],[11,"bitand","","",1,null],[11,"bitor","","",1,null],[11,"terms","","",1,null],[11,"eval","","",1,null],[11,"minterms","","",1,null],[11,"simplify","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",0,null],[11,"prime_implicant_expr","","",0,null],[11,"clone","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"with_dontcare","","",3,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"combine","","",3,null],[11,"contains","","",3,null],[11,"to_bool_expr","","",3,null]],"paths":[[3,"Essentials"],[4,"Bool"],[4,"TermFromStrError"],[3,"Term"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,null],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,null],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,null],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,null]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",1,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",1,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",2,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",1,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",1,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",2,null]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_tt_as_expr_hack","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
initSearch(searchIndex);
